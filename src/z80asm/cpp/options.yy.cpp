// cpp/options.yy.cpp generated by reflex 2.0.1 from cpp/options.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_dotall              true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "cpp/options.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               OptionsLexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "cpp/options.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


	// silence warnings from RE-flex
	#ifdef _MSC_VER
	#pragma warning(disable:4102)
	#pragma warning(disable:4800)
	#else
	#ifdef __GNUC__
	//#pragma GCC   diagnostic ignored "-Wignored-qualifiers"
	#else
	#ifdef __clang__
	//#pragma clang diagnostic ignored "-Wignored-qualifiers"
	#endif
	#endif
	#endif

	#include "legacy.h"

	#include "config.h"
	#include "z80asm_manual.h"
	#include "z80asm_usage.h"

	#include <cassert>
	#include <iostream>
	#include <string>
	#include <vector>

	#ifndef Z88DK_VERSION
	#define Z88DK_VERSION "build " __DATE__
	#endif


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class OptionsLexer : public reflex::AbstractLexer<reflex::Matcher> {

	private:
		static const char copyrightmsg[];

		bool verbose;				// true to be verbose
		int cpu;					// TODO: replace with class enum
		bool isTi83Plus;			// true for the TI83Plus
		std::string cpuName;		// used to search libraries
		bool swapIxIy;				// swap IX and IY
		bool optimizeSpeed;			// true to optimize for speed
		std::string envPendingOpts;	// options from environment to parse by the C code
									// TODO: to remove
		std::vector<std::string> defines;	// list of -D defines

	public:
		bool ParseEnv(const std::string& envVariable = "Z80ASM");	// parse options from environment
		bool ParseArgs(int argc, char* argv[]);						// parse options from ARGV

		bool IsVerbose() const { return verbose; }
		const char* GetEnvPendingOpts() const { return envPendingOpts.c_str(); }
		int GetCpu() const { return cpu; }
		const std::string& GetCpuName() const { return cpuName; }
		bool IsTi83Plus() const { return isTi83Plus; }
		bool SwapIxIy() const { return swapIxIy; }
		bool IsOptimizeSpeed() const { return optimizeSpeed; }
		auto cbeginDefines() const { return defines.cbegin(); }
		auto cendDefines() const { return defines.cend(); }

	private:
		void ShowManual() const;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  OptionsLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// z80asm restart
// Copyright (C) Paulo Custodio, 2011-2020
// License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int OptionsLexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 75: -v\z|--verbose\z :
{ verbose = true; return true; }

            break;
          case 2: // rule at line 78: -h\z|--help\z :
{ ShowManual(); return true; }

            break;
          case 3: // rule at line 81: -m=?z80\z|--cpu=?z80\z :
{ cpu = CPU_Z80; return true; }

            break;
          case 4: // rule at line 84: -m=?z80n\z|--cpu=?z80n\z :
{ cpu = CPU_Z80N; return true; }

            break;
          case 5: // rule at line 87: -m=?z180\z|--cpu=?z180\z :
{ cpu = CPU_Z180; return true; }

            break;
          case 6: // rule at line 90: -m=?r2k\z|--cpu=?r2k\z :
{ cpu = CPU_R2K; return true; }

            break;
          case 7: // rule at line 93: -m=?r3k\z|--cpu=?r3k\z :
{ cpu = CPU_R3K; return true; }

            break;
          case 8: // rule at line 96: -m=?8080\z|--cpu=?8080\z :
{ cpu = CPU_8080; return true; }

            break;
          case 9: // rule at line 99: -m=?8085\z|--cpu=?8085\z :
{ cpu = CPU_8085; return true; }

            break;
          case 10: // rule at line 102: -m=?gbz80\z|--cpu=?gbz80\z :
{ cpu = CPU_GBZ80; return true; }

            break;
          case 11: // rule at line 105: -m=?ti83\z|--cpu=?ti83\z :
{ cpu = CPU_Z80; isTi83Plus = false; return true; }	// TODO: define __ARCH_TI83__

            break;
          case 12: // rule at line 108: -m=?ti83plus\z|--cpu=?ti83plus\z :
{ cpu = CPU_Z80; isTi83Plus = true; return true; }	// TODO: define __ARCH_TI83PLUS__

            break;
          case 13: // rule at line 111: -IXIY\z|--IXIY\z :
{ swapIxIy = true; return true; }

            break;
          case 14: // rule at line 113: --opt=speed :
{ optimizeSpeed = true; return true; }

            break;
          case 15: // rule at line 115: [\x00-\xff] :
{ return false; }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 3: user code                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


const char OptionsLexer::copyrightmsg[]{
	"Z80 Module Assembler " Z88DK_VERSION "\n"
		"(c) InterLogic 1993-2009, Paulo Custodio 2011-2020"
};

bool OptionsLexer::ParseEnv(const std::string& envVariable)
{
	using namespace std;

	envPendingOpts.clear();

	const char *opts = getenv(envVariable.c_str());
	if (!opts)
		return true;
	stringstream iss{ string(opts) };
	string arg;

	while (iss >> arg) {
		in(arg);
		if (!lex()) {						// TODO: error handling
			envPendingOpts += arg + " ";	// pass options not parsed to the C code
		}
	}

	return true;
}

bool OptionsLexer::ParseArgs(int argc, char* argv[])
{
	using namespace std;

	// if no arguments, just show usage and exit
	if (argc == 1) {
		cout << copyrightmsg << endl << endl
			<< z80asm_usage;
		exit(EXIT_SUCCESS);
	}

	// parse options
	for (int i = 1; i < argc; ++i) {
		in(argv[i]);
		if (lex())
			argv[i][0] = '\0';		// cancel this argument for next pass
		else {						// TODO: error handling
		}
	}

	switch (cpu) {		// TODO: use a lookup-table
	case CPU_NOT_DEFINED:
		cpu = CPU_Z80;
		// fall through
	case CPU_Z80:
		cpuName = CPU_Z80_NAME;
		defines.push_back(CPU_Z80_DEFINE);
		defines.push_back(CPU_ZILOG_DEFINE);
		break;
	case CPU_Z80N:
		cpuName = CPU_Z80N_NAME;
		defines.push_back(CPU_Z80N_DEFINE);
		defines.push_back(CPU_ZILOG_DEFINE);
		break;
	case CPU_Z180:
		cpuName = CPU_Z180_NAME;
		defines.push_back(CPU_Z180_DEFINE);
		defines.push_back(CPU_ZILOG_DEFINE);
		break;
	case CPU_R2K:
		cpuName = CPU_R2K_NAME;
		defines.push_back(CPU_R2K_DEFINE);
		defines.push_back(CPU_RABBIT_DEFINE);
		break;
	case CPU_R3K:
		cpuName = CPU_R3K_NAME;
		defines.push_back(CPU_R3K_DEFINE);
		defines.push_back(CPU_RABBIT_DEFINE);
		break;
	case CPU_8080:
		cpuName = CPU_8080_NAME;
		defines.push_back(CPU_8080_DEFINE);
		defines.push_back(CPU_INTEL_DEFINE);
		break;
	case CPU_8085:
		cpuName = CPU_8085_NAME;
		defines.push_back(CPU_8085_DEFINE);
		defines.push_back(CPU_INTEL_DEFINE);
		break;
	case CPU_GBZ80:
		cpuName = CPU_GBZ80_NAME;
		defines.push_back(CPU_GBZ80_DEFINE);
		break;
	default:
		assert(0);
	}

	return true;
}

void OptionsLexer::ShowManual() const
{
	using namespace std;
	cout << z80asm_manual;
	exit(EXIT_SUCCESS);
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S2;
  if (0 <= c1) goto S9;
  return m.FSM_HALT(c1);

S2:
  m.FSM_TAKE(15);
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S11;
  if (c1 == 'm') goto S21;
  if (c1 == 'h') goto S19;
  if (c1 == 'I') goto S28;
  if (c1 == '-') goto S13;
  return m.FSM_HALT(c1);

S9:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S11:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(1, c1);
  }
  return m.FSM_HALT(c1);

S13:
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S32;
  if (c1 == 'o') goto S40;
  if (c1 == 'h') goto S34;
  if (c1 == 'c') goto S36;
  if (c1 == 'I') goto S38;
  return m.FSM_HALT(c1);

S19:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(2, c1);
  }
  return m.FSM_HALT(c1);

S21:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S44;
  if (c1 == 't') goto S54;
  if (c1 == 'r') goto S47;
  if (c1 == 'g') goto S52;
  if (c1 == '=') goto S56;
  if (c1 == '8') goto S50;
  return m.FSM_HALT(c1);

S28:
  c1 = m.FSM_CHAR();
  if (c1 == 'X') goto S62;
  return m.FSM_HALT(c1);

S30:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S32:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S64;
  return m.FSM_HALT(c1);

S34:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S66;
  return m.FSM_HALT(c1);

S36:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S68;
  return m.FSM_HALT(c1);

S38:
  c1 = m.FSM_CHAR();
  if (c1 == 'X') goto S70;
  return m.FSM_HALT(c1);

S40:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S72;
  return m.FSM_HALT(c1);

S42:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S44:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S74;
  if (c1 == '1') goto S76;
  return m.FSM_HALT(c1);

S47:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S80;
  if (c1 == '2') goto S78;
  return m.FSM_HALT(c1);

S50:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S82;
  return m.FSM_HALT(c1);

S52:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S84;
  return m.FSM_HALT(c1);

S54:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S86;
  return m.FSM_HALT(c1);

S56:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S44;
  if (c1 == 't') goto S54;
  if (c1 == 'r') goto S47;
  if (c1 == 'g') goto S52;
  if (c1 == '8') goto S50;
  return m.FSM_HALT(c1);

S62:
  c1 = m.FSM_CHAR();
  if (c1 == 'I') goto S88;
  return m.FSM_HALT(c1);

S64:
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S90;
  return m.FSM_HALT(c1);

S66:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S92;
  return m.FSM_HALT(c1);

S68:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S94;
  return m.FSM_HALT(c1);

S70:
  c1 = m.FSM_CHAR();
  if (c1 == 'I') goto S101;
  return m.FSM_HALT(c1);

S72:
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S103;
  return m.FSM_HALT(c1);

S74:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S105;
  return m.FSM_HALT(c1);

S76:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S108;
  return m.FSM_HALT(c1);

S78:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S110;
  return m.FSM_HALT(c1);

S80:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S112;
  return m.FSM_HALT(c1);

S82:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S114;
  return m.FSM_HALT(c1);

S84:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S117;
  return m.FSM_HALT(c1);

S86:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S119;
  return m.FSM_HALT(c1);

S88:
  c1 = m.FSM_CHAR();
  if (c1 == 'Y') goto S121;
  return m.FSM_HALT(c1);

S90:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S123;
  return m.FSM_HALT(c1);

S92:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S125;
  return m.FSM_HALT(c1);

S94:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S127;
  if (c1 == 't') goto S137;
  if (c1 == 'r') goto S130;
  if (c1 == 'g') goto S135;
  if (c1 == '=') goto S139;
  if (c1 == '8') goto S133;
  return m.FSM_HALT(c1);

S101:
  c1 = m.FSM_CHAR();
  if (c1 == 'Y') goto S145;
  return m.FSM_HALT(c1);

S103:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S147;
  return m.FSM_HALT(c1);

S105:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(3, c1);
  }
  if (c1 == 'n') goto S151;
  return m.FSM_HALT(c1);

S108:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S153;
  return m.FSM_HALT(c1);

S110:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(6, c1);
  }
  return m.FSM_HALT(c1);

S112:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(7, c1);
  }
  return m.FSM_HALT(c1);

S114:
  c1 = m.FSM_CHAR();
  if (c1 == '5') goto S161;
  if (c1 == '0') goto S159;
  return m.FSM_HALT(c1);

S117:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S163;
  return m.FSM_HALT(c1);

S119:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S165;
  return m.FSM_HALT(c1);

S121:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(13, c1);
  }
  return m.FSM_HALT(c1);

S123:
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S170;
  return m.FSM_HALT(c1);

S125:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(2, c1);
  }
  return m.FSM_HALT(c1);

S127:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S172;
  if (c1 == '1') goto S174;
  return m.FSM_HALT(c1);

S130:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S178;
  if (c1 == '2') goto S176;
  return m.FSM_HALT(c1);

S133:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S180;
  return m.FSM_HALT(c1);

S135:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S182;
  return m.FSM_HALT(c1);

S137:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S184;
  return m.FSM_HALT(c1);

S139:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S127;
  if (c1 == 't') goto S137;
  if (c1 == 'r') goto S130;
  if (c1 == 'g') goto S135;
  if (c1 == '8') goto S133;
  return m.FSM_HALT(c1);

S145:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(13, c1);
  }
  return m.FSM_HALT(c1);

S147:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S186;
  return m.FSM_HALT(c1);

S149:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S151:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(4, c1);
  }
  return m.FSM_HALT(c1);

S153:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(5, c1);
  }
  return m.FSM_HALT(c1);

S155:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S157:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S159:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(8, c1);
  }
  return m.FSM_HALT(c1);

S161:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(9, c1);
  }
  return m.FSM_HALT(c1);

S163:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S196;
  return m.FSM_HALT(c1);

S165:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(11, c1);
  }
  if (c1 == 'p') goto S200;
  return m.FSM_HALT(c1);

S168:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S170:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S202;
  return m.FSM_HALT(c1);

S172:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S204;
  return m.FSM_HALT(c1);

S174:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S207;
  return m.FSM_HALT(c1);

S176:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S209;
  return m.FSM_HALT(c1);

S178:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S211;
  return m.FSM_HALT(c1);

S180:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S213;
  return m.FSM_HALT(c1);

S182:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S216;
  return m.FSM_HALT(c1);

S184:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S218;
  return m.FSM_HALT(c1);

S186:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S220;
  return m.FSM_HALT(c1);

S188:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S190:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S192:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S194:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S196:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(10, c1);
  }
  return m.FSM_HALT(c1);

S198:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S200:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S224;
  return m.FSM_HALT(c1);

S202:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S226;
  return m.FSM_HALT(c1);

S204:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(3, c1);
  }
  if (c1 == 'n') goto S228;
  return m.FSM_HALT(c1);

S207:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S230;
  return m.FSM_HALT(c1);

S209:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(6, c1);
  }
  return m.FSM_HALT(c1);

S211:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(7, c1);
  }
  return m.FSM_HALT(c1);

S213:
  c1 = m.FSM_CHAR();
  if (c1 == '5') goto S234;
  if (c1 == '0') goto S232;
  return m.FSM_HALT(c1);

S216:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S236;
  return m.FSM_HALT(c1);

S218:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S238;
  return m.FSM_HALT(c1);

S220:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S241;
  return m.FSM_HALT(c1);

S222:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S224:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S243;
  return m.FSM_HALT(c1);

S226:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(1, c1);
  }
  return m.FSM_HALT(c1);

S228:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(4, c1);
  }
  return m.FSM_HALT(c1);

S230:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(5, c1);
  }
  return m.FSM_HALT(c1);

S232:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(8, c1);
  }
  return m.FSM_HALT(c1);

S234:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(9, c1);
  }
  return m.FSM_HALT(c1);

S236:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S245;
  return m.FSM_HALT(c1);

S238:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(11, c1);
  }
  if (c1 == 'p') goto S247;
  return m.FSM_HALT(c1);

S241:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S249;
  return m.FSM_HALT(c1);

S243:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S251;
  return m.FSM_HALT(c1);

S245:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(10, c1);
  }
  return m.FSM_HALT(c1);

S247:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S253;
  return m.FSM_HALT(c1);

S249:
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S255;
  return m.FSM_HALT(c1);

S251:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(12, c1);
  }
  return m.FSM_HALT(c1);

S253:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S259;
  return m.FSM_HALT(c1);

S255:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S257:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S259:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S261;
  return m.FSM_HALT(c1);

S261:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(12, c1);
  }
  return m.FSM_HALT(c1);
}

