// cpp/options.yy.cpp generated by reflex 2.0.1 from cpp/options.l

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_dotall              true
#define REFLEX_OPTION_fast                true
#define REFLEX_OPTION_freespace           true
#define REFLEX_OPTION_header_file         "cpp/options.yy.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               OptionsLexer
#define REFLEX_OPTION_noline              true
#define REFLEX_OPTION_outfile             "cpp/options.yy.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


	// silence warnings from RE-flex
	#ifdef _MSC_VER
	#pragma warning(disable:4102)
	#pragma warning(disable:4800)
	#else
	#ifdef __GNUC__
	//#pragma GCC   diagnostic ignored "-Wignored-qualifiers"
	#else
	#ifdef __clang__
	//#pragma clang diagnostic ignored "-Wignored-qualifiers"
	#endif
	#endif
	#endif

	#include "Arch.h"
	#include "Cpu.h"
	#include "Options.h"


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

class OptionsLexer : public reflex::AbstractLexer<reflex::Matcher> {
 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  OptionsLexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  virtual int lex();
  int lex(
      const reflex::Input& input,
      std::ostream        *os = NULL)
  {
    in(input);
    if (os)
      out(*os);
    return lex();
  }
};

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

//-----------------------------------------------------------------------------
// z80asm restart
// Copyright (C) Paulo Custodio, 2011-2020
// License: The Artistic License 2.0, http://www.perlfoundation.org/artistic_license_2_0
//-----------------------------------------------------------------------------


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

extern void reflex_code_INITIAL(reflex::Matcher&);

int OptionsLexer::lex()
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule at line 32: -v\z|--verbose\z :
{ theOptions.verbose = true; return true; }

            break;
          case 2: // rule at line 36: -\?\z|-h\z|--help\z :
{ ExitManual(); }

            break;
          case 3: // rule at line 39: -m=?z80\z|--cpu=?z80\z :
{ theCpu.Init(Cpu::Type::Z80); return true; }

            break;
          case 4: // rule at line 42: -m=?z80n\z|--cpu=?z80n\z :
{ theCpu.Init(Cpu::Type::Z80N); return true; }

            break;
          case 5: // rule at line 45: -m=?z180\z|--cpu=?z180\z :
{ theCpu.Init(Cpu::Type::Z180); return true; }

            break;
          case 6: // rule at line 48: -m=?r2k\z|--cpu=?r2k\z :
{ theCpu.Init(Cpu::Type::R2K); return true; }

            break;
          case 7: // rule at line 51: -m=?r3k\z|--cpu=?r3k\z :
{ theCpu.Init(Cpu::Type::R3K); return true; }

            break;
          case 8: // rule at line 54: -m=?8080\z|--cpu=?8080\z :
{ theCpu.Init(Cpu::Type::I8080); return true; }

            break;
          case 9: // rule at line 57: -m=?8085\z|--cpu=?8085\z :
{ theCpu.Init(Cpu::Type::I8085); return true; }

            break;
          case 10: // rule at line 60: -m=?gbz80\z|--cpu=?gbz80\z :
{ theCpu.Init(Cpu::Type::GBZ80); return true; }

            break;
          case 11: // rule at line 63: -m=?ti83\z|--cpu=?ti83\z :
{	theCpu.Init(Cpu::Type::Z80);
					theArch.Init(Arch::Type::TI83);
					return true; }

            break;
          case 12: // rule at line 68: -m=?ti83plus\z|--cpu=?ti83plus\z :
{
					theCpu.Init(Cpu::Type::Z80);
					theArch.Init(Arch::Type::TI83PLUS);
					return true; }

            break;
          case 13: // rule at line 74: -IXIY\z|--IXIY\z :
{ theOptions.swapIxIy = true; return true; }

            break;
          case 14: // rule at line 76: --opt=speed\z :
{ theOptions.optimizeSpeed = true; return true; }

            break;
          case 15: // rule at line 78: --debug\z :
{	theOptions.debugInfo = true;
					theOptions.doMapFile = true;
					return true; }

            break;
          case 16: // rule at line 82: -m\z :
          case 17: // rule at line 83: --map\z :
{ theOptions.doMapFile = true; return true; }

            break;
          case 18: // rule at line 85: -I=[\x00-\xff]+ :
{ theOptions.includePath.push_back(text() + 3);  return true; }
            break;
          case 19: // rule at line 86: -I[\x00-\xff]+ :
{ theOptions.includePath.push_back(text() + 2);  return true; }
            break;
          case 20: // rule at line 87: --inc-path=[\x00-\xff]+ :
{ theOptions.includePath.push_back(text() + 11); return true; }
            break;
          case 21: // rule at line 88: --inc-path[\x00-\xff]+ :
{ theOptions.includePath.push_back(text() + 10); return true; }

            break;
          case 22: // rule at line 90: -L=[\x00-\xff]+ :
{ theOptions.libraryPath.push_back(text() + 3);  return true; }
            break;
          case 23: // rule at line 91: -L[\x00-\xff]+ :
{ theOptions.libraryPath.push_back(text() + 2);  return true; }
            break;
          case 24: // rule at line 92: --lib-path=[\x00-\xff]+ :
{ theOptions.libraryPath.push_back(text() + 11); return true; }
            break;
          case 25: // rule at line 93: --lib-path[\x00-\xff]+ :
{ theOptions.libraryPath.push_back(text() + 10); return true; }

            break;
          case 26: // rule at line 95: [\x00-\xff] :
{ return false; }

            break;
        }
  }
}

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  TABLES                                                                    //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/matcher.h>

#if defined(OS_WIN)
#pragma warning(disable:4101 4102)
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wunused-variable"
#pragma GCC diagnostic ignored "-Wunused-label"
#elif defined(__clang__)
#pragma clang diagnostic ignored "-Wunused-variable"
#pragma clang diagnostic ignored "-Wunused-label"
#endif

void reflex_code_INITIAL(reflex::Matcher& m)
{
  int c0 = 0, c1 = 0;
  m.FSM_INIT(c1);

S0:
  m.FSM_FIND();
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S2;
  if (0 <= c1) goto S11;
  return m.FSM_HALT(c1);

S2:
  m.FSM_TAKE(26);
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S13;
  if (c1 == 'm') goto S29;
  if (c1 == 'h') goto S27;
  if (c1 == 'L') goto S40;
  if (c1 == 'I') goto S37;
  if (c1 == '?') goto S25;
  if (c1 == '-') goto S15;
  return m.FSM_HALT(c1);

S11:
  m.FSM_TAKE(26);
  return m.FSM_HALT();

S13:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(1, c1);
  }
  return m.FSM_HALT(c1);

S15:
  c1 = m.FSM_CHAR();
  if (c1 == 'v') goto S44;
  if (c1 == 'o') goto S52;
  if (c1 == 'm') goto S56;
  if (c1 == 'l') goto S60;
  if (c1 == 'i') goto S58;
  if (c1 == 'h') goto S46;
  if (c1 == 'd') goto S54;
  if (c1 == 'c') goto S48;
  if (c1 == 'I') goto S50;
  return m.FSM_HALT(c1);

S25:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(2, c1);
  }
  return m.FSM_HALT(c1);

S27:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(2, c1);
  }
  return m.FSM_HALT(c1);

S29:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(16, c1);
  }
  if (c1 == 'z') goto S64;
  if (c1 == 't') goto S74;
  if (c1 == 'r') goto S67;
  if (c1 == 'g') goto S72;
  if (c1 == '=') goto S78;
  if (c1 == '8') goto S70;
  return m.FSM_HALT(c1);

S37:
  c1 = m.FSM_CHAR();
  if (c1 == 'X') goto S84;
  if (c1 == '=') goto S87;
  if (0 <= c1) goto S89;
  return m.FSM_HALT(c1);

S40:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S91;
  if (0 <= c1) goto S93;
  return m.FSM_HALT(c1);

S42:
  m.FSM_TAKE(1);
  return m.FSM_HALT();

S44:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S95;
  return m.FSM_HALT(c1);

S46:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S97;
  return m.FSM_HALT(c1);

S48:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S99;
  return m.FSM_HALT(c1);

S50:
  c1 = m.FSM_CHAR();
  if (c1 == 'X') goto S101;
  return m.FSM_HALT(c1);

S52:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S103;
  return m.FSM_HALT(c1);

S54:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S105;
  return m.FSM_HALT(c1);

S56:
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S107;
  return m.FSM_HALT(c1);

S58:
  c1 = m.FSM_CHAR();
  if (c1 == 'n') goto S109;
  return m.FSM_HALT(c1);

S60:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S111;
  return m.FSM_HALT(c1);

S62:
  m.FSM_TAKE(2);
  return m.FSM_HALT();

S64:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S113;
  if (c1 == '1') goto S115;
  return m.FSM_HALT(c1);

S67:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S119;
  if (c1 == '2') goto S117;
  return m.FSM_HALT(c1);

S70:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S121;
  return m.FSM_HALT(c1);

S72:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S123;
  return m.FSM_HALT(c1);

S74:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S125;
  return m.FSM_HALT(c1);

S76:
  m.FSM_TAKE(16);
  return m.FSM_HALT();

S78:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S64;
  if (c1 == 't') goto S74;
  if (c1 == 'r') goto S67;
  if (c1 == 'g') goto S72;
  if (c1 == '8') goto S70;
  return m.FSM_HALT(c1);

S84:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (c1 == 'I') goto S127;
  if (0 <= c1) goto S89;
  return m.FSM_HALT(c1);

S87:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S130;
  return m.FSM_HALT(c1);

S89:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S89;
  return m.FSM_HALT(c1);

S91:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S132;
  return m.FSM_HALT(c1);

S93:
  m.FSM_TAKE(23);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S93;
  return m.FSM_HALT(c1);

S95:
  c1 = m.FSM_CHAR();
  if (c1 == 'r') goto S134;
  return m.FSM_HALT(c1);

S97:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S136;
  return m.FSM_HALT(c1);

S99:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S138;
  return m.FSM_HALT(c1);

S101:
  c1 = m.FSM_CHAR();
  if (c1 == 'I') goto S145;
  return m.FSM_HALT(c1);

S103:
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S147;
  return m.FSM_HALT(c1);

S105:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S149;
  return m.FSM_HALT(c1);

S107:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S151;
  return m.FSM_HALT(c1);

S109:
  c1 = m.FSM_CHAR();
  if (c1 == 'c') goto S153;
  return m.FSM_HALT(c1);

S111:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S155;
  return m.FSM_HALT(c1);

S113:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S157;
  return m.FSM_HALT(c1);

S115:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S160;
  return m.FSM_HALT(c1);

S117:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S162;
  return m.FSM_HALT(c1);

S119:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S164;
  return m.FSM_HALT(c1);

S121:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S166;
  return m.FSM_HALT(c1);

S123:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S169;
  return m.FSM_HALT(c1);

S125:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S171;
  return m.FSM_HALT(c1);

S127:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (c1 == 'Y') goto S173;
  if (0 <= c1) goto S89;
  return m.FSM_HALT(c1);

S130:
  m.FSM_TAKE(18);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S130;
  return m.FSM_HALT(c1);

S132:
  m.FSM_TAKE(22);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S132;
  return m.FSM_HALT(c1);

S134:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S176;
  return m.FSM_HALT(c1);

S136:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S178;
  return m.FSM_HALT(c1);

S138:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S180;
  if (c1 == 't') goto S190;
  if (c1 == 'r') goto S183;
  if (c1 == 'g') goto S188;
  if (c1 == '=') goto S192;
  if (c1 == '8') goto S186;
  return m.FSM_HALT(c1);

S145:
  c1 = m.FSM_CHAR();
  if (c1 == 'Y') goto S198;
  return m.FSM_HALT(c1);

S147:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S200;
  return m.FSM_HALT(c1);

S149:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S202;
  return m.FSM_HALT(c1);

S151:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(17, c1);
  }
  return m.FSM_HALT(c1);

S153:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S206;
  return m.FSM_HALT(c1);

S155:
  c1 = m.FSM_CHAR();
  if (c1 == '-') goto S208;
  return m.FSM_HALT(c1);

S157:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(3, c1);
  }
  if (c1 == 'n') goto S212;
  return m.FSM_HALT(c1);

S160:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S214;
  return m.FSM_HALT(c1);

S162:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(6, c1);
  }
  return m.FSM_HALT(c1);

S164:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(7, c1);
  }
  return m.FSM_HALT(c1);

S166:
  c1 = m.FSM_CHAR();
  if (c1 == '5') goto S222;
  if (c1 == '0') goto S220;
  return m.FSM_HALT(c1);

S169:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S224;
  return m.FSM_HALT(c1);

S171:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S226;
  return m.FSM_HALT(c1);

S173:
  m.FSM_TAKE(19);
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(13, c1);
  }
  if (0 <= c1) goto S89;
  return m.FSM_HALT(c1);

S176:
  c1 = m.FSM_CHAR();
  if (c1 == 'o') goto S231;
  return m.FSM_HALT(c1);

S178:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(2, c1);
  }
  return m.FSM_HALT(c1);

S180:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S233;
  if (c1 == '1') goto S235;
  return m.FSM_HALT(c1);

S183:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S239;
  if (c1 == '2') goto S237;
  return m.FSM_HALT(c1);

S186:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S241;
  return m.FSM_HALT(c1);

S188:
  c1 = m.FSM_CHAR();
  if (c1 == 'b') goto S243;
  return m.FSM_HALT(c1);

S190:
  c1 = m.FSM_CHAR();
  if (c1 == 'i') goto S245;
  return m.FSM_HALT(c1);

S192:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S180;
  if (c1 == 't') goto S190;
  if (c1 == 'r') goto S183;
  if (c1 == 'g') goto S188;
  if (c1 == '8') goto S186;
  return m.FSM_HALT(c1);

S198:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(13, c1);
  }
  return m.FSM_HALT(c1);

S200:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S247;
  return m.FSM_HALT(c1);

S202:
  c1 = m.FSM_CHAR();
  if (c1 == 'g') goto S249;
  return m.FSM_HALT(c1);

S204:
  m.FSM_TAKE(17);
  return m.FSM_HALT();

S206:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S251;
  return m.FSM_HALT(c1);

S208:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S253;
  return m.FSM_HALT(c1);

S210:
  m.FSM_TAKE(3);
  return m.FSM_HALT();

S212:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(4, c1);
  }
  return m.FSM_HALT(c1);

S214:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(5, c1);
  }
  return m.FSM_HALT(c1);

S216:
  m.FSM_TAKE(6);
  return m.FSM_HALT();

S218:
  m.FSM_TAKE(7);
  return m.FSM_HALT();

S220:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(8, c1);
  }
  return m.FSM_HALT(c1);

S222:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(9, c1);
  }
  return m.FSM_HALT(c1);

S224:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S263;
  return m.FSM_HALT(c1);

S226:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(11, c1);
  }
  if (c1 == 'p') goto S267;
  return m.FSM_HALT(c1);

S229:
  m.FSM_TAKE(13);
  return m.FSM_HALT();

S231:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S269;
  return m.FSM_HALT(c1);

S233:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S271;
  return m.FSM_HALT(c1);

S235:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S274;
  return m.FSM_HALT(c1);

S237:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S276;
  return m.FSM_HALT(c1);

S239:
  c1 = m.FSM_CHAR();
  if (c1 == 'k') goto S278;
  return m.FSM_HALT(c1);

S241:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S280;
  return m.FSM_HALT(c1);

S243:
  c1 = m.FSM_CHAR();
  if (c1 == 'z') goto S283;
  return m.FSM_HALT(c1);

S245:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S285;
  return m.FSM_HALT(c1);

S247:
  c1 = m.FSM_CHAR();
  if (c1 == 'p') goto S287;
  return m.FSM_HALT(c1);

S249:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(15, c1);
  }
  return m.FSM_HALT(c1);

S251:
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S291;
  return m.FSM_HALT(c1);

S253:
  c1 = m.FSM_CHAR();
  if (c1 == 'a') goto S293;
  return m.FSM_HALT(c1);

S255:
  m.FSM_TAKE(4);
  return m.FSM_HALT();

S257:
  m.FSM_TAKE(5);
  return m.FSM_HALT();

S259:
  m.FSM_TAKE(8);
  return m.FSM_HALT();

S261:
  m.FSM_TAKE(9);
  return m.FSM_HALT();

S263:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(10, c1);
  }
  return m.FSM_HALT(c1);

S265:
  m.FSM_TAKE(11);
  return m.FSM_HALT();

S267:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S297;
  return m.FSM_HALT(c1);

S269:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S299;
  return m.FSM_HALT(c1);

S271:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(3, c1);
  }
  if (c1 == 'n') goto S301;
  return m.FSM_HALT(c1);

S274:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S303;
  return m.FSM_HALT(c1);

S276:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(6, c1);
  }
  return m.FSM_HALT(c1);

S278:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(7, c1);
  }
  return m.FSM_HALT(c1);

S280:
  c1 = m.FSM_CHAR();
  if (c1 == '5') goto S307;
  if (c1 == '0') goto S305;
  return m.FSM_HALT(c1);

S283:
  c1 = m.FSM_CHAR();
  if (c1 == '8') goto S309;
  return m.FSM_HALT(c1);

S285:
  c1 = m.FSM_CHAR();
  if (c1 == '3') goto S311;
  return m.FSM_HALT(c1);

S287:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S314;
  return m.FSM_HALT(c1);

S289:
  m.FSM_TAKE(15);
  return m.FSM_HALT();

S291:
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S316;
  return m.FSM_HALT(c1);

S293:
  c1 = m.FSM_CHAR();
  if (c1 == 't') goto S318;
  return m.FSM_HALT(c1);

S295:
  m.FSM_TAKE(10);
  return m.FSM_HALT();

S297:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S320;
  return m.FSM_HALT(c1);

S299:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(1, c1);
  }
  return m.FSM_HALT(c1);

S301:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(4, c1);
  }
  return m.FSM_HALT(c1);

S303:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(5, c1);
  }
  return m.FSM_HALT(c1);

S305:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(8, c1);
  }
  return m.FSM_HALT(c1);

S307:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(9, c1);
  }
  return m.FSM_HALT(c1);

S309:
  c1 = m.FSM_CHAR();
  if (c1 == '0') goto S322;
  return m.FSM_HALT(c1);

S311:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(11, c1);
  }
  if (c1 == 'p') goto S324;
  return m.FSM_HALT(c1);

S314:
  c1 = m.FSM_CHAR();
  if (c1 == 'e') goto S326;
  return m.FSM_HALT(c1);

S316:
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S328;
  return m.FSM_HALT(c1);

S318:
  c1 = m.FSM_CHAR();
  if (c1 == 'h') goto S330;
  return m.FSM_HALT(c1);

S320:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S332;
  return m.FSM_HALT(c1);

S322:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(10, c1);
  }
  return m.FSM_HALT(c1);

S324:
  c1 = m.FSM_CHAR();
  if (c1 == 'l') goto S334;
  return m.FSM_HALT(c1);

S326:
  c1 = m.FSM_CHAR();
  if (c1 == 'd') goto S336;
  return m.FSM_HALT(c1);

S328:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S338;
  if (0 <= c1) goto S340;
  return m.FSM_HALT(c1);

S330:
  c1 = m.FSM_CHAR();
  if (c1 == '=') goto S342;
  if (0 <= c1) goto S344;
  return m.FSM_HALT(c1);

S332:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(12, c1);
  }
  return m.FSM_HALT(c1);

S334:
  c1 = m.FSM_CHAR();
  if (c1 == 'u') goto S348;
  return m.FSM_HALT(c1);

S336:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(14, c1);
  }
  return m.FSM_HALT(c1);

S338:
  m.FSM_TAKE(21);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S352;
  return m.FSM_HALT(c1);

S340:
  m.FSM_TAKE(21);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S340;
  return m.FSM_HALT(c1);

S342:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S354;
  return m.FSM_HALT(c1);

S344:
  m.FSM_TAKE(25);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S344;
  return m.FSM_HALT(c1);

S346:
  m.FSM_TAKE(12);
  return m.FSM_HALT();

S348:
  c1 = m.FSM_CHAR();
  if (c1 == 's') goto S356;
  return m.FSM_HALT(c1);

S350:
  m.FSM_TAKE(14);
  return m.FSM_HALT();

S352:
  m.FSM_TAKE(20);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S352;
  return m.FSM_HALT(c1);

S354:
  m.FSM_TAKE(24);
  c1 = m.FSM_CHAR();
  if (0 <= c1) goto S354;
  return m.FSM_HALT(c1);

S356:
  c1 = m.FSM_CHAR();
  if (m.FSM_META_EOB(c1)) {
    m.FSM_TAKE(12, c1);
  }
  return m.FSM_HALT(c1);
}

