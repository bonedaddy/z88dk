  z80asm-future.md

                z80asm - Z80 module assembler, linker, librarian

   z80asm is part of the [1]z88dk project and is used as the back-end of the
   z88dk C compilers. It is not to be confused with other non-z88dk related
   projects with the same name.

   z80asm is a relocatable assembler, linker and librarian that can assemble
   Intel 8080/8085 and [2]Z80 -family assembly files into a relocatable
   object format, can manage sets of object files in libraries and can build
   binary images by linking these object files together. The binary images
   can be defined in different sections, to match the target architecture.

   ══════════════════════════════════════════════════════════════════════════

   [3](top) [4](keywords) [5](index)

1. Usage ...

   ══════════════════════════════════════════════════════════════════════════

   [6](top) [7](keywords) [8](index)

  1.1. ... as preprocessor

 z80asm -E [options] file...

   Preprocess each input file and store the result in files with the .i
   extension, with all macros expanded, include files expanded, and constants
   converted to hexadecimal.

   ══════════════════════════════════════════════════════════════════════════

   [9](top) [10](keywords) [11](index)

  1.2. ... as assembler

 z80asm [options] file...

   By default, i.e. without any options, assemble each of the listed files
   into relocatable object files with a .o extension.

   ══════════════════════════════════════════════════════════════════════════

   [12](top) [13](keywords) [14](index)

  1.3. ... as linker

 z80asm  [-b](#6_2_6)  [options] [-ilibrary.lib...] file...

   Link the object files together and with any requested libraries into a set
   of binary files.

   ══════════════════════════════════════════════════════════════════════════

   [15](top) [16](keywords) [17](index)

  1.4. ... as librarian

 z80asm -xlibrary.lib [options] file...

   Build a library containing all the object files passed as argument. That
   library can then be used during linking by specifying it with the
   [-i](#6_2_14) option.

   ══════════════════════════════════════════════════════════════════════════

   [18](top) [19](keywords) [20](index)

2. Environment Variables

   The syntax ${ENV_VAR} can be used whenever a file name or a command line
   option is expected, and expands to the value of the given environment
   variable, or the empty string if it is not defined.

   The environment variable Z80ASM, if defined, contains additional options
   that are used in every invocation of z80asm.

   The environment variable ZCCCFG is used to search for the z80asm libraries
   at its parent directory, i.e. ${ZCCCFG}/... These libraries define
   emulation routines for certain opcodes not available in all platforms.

   TODO: table with all emulated opcodes.

   ══════════════════════════════════════════════════════════════════════════

   [21](top) [22](keywords) [23](index)

3. Options

   ══════════════════════════════════════════════════════════════════════════

   [24](top) [25](keywords) [26](index)

  3.1. Help Options

   ══════════════════════════════════════════════════════════════════════════

   [27](top) [28](keywords) [29](index)

    3.1.1. no arguments (show usage)

   Show a help screen with the available options.

   ══════════════════════════════════════════════════════════════════════════

   [30](top) [31](keywords) [32](index)

    3.1.2. -h, -?, --help (show manual)

   Show this document. The output can be piped to more for pagination.

   ══════════════════════════════════════════════════════════════════════════

   [33](top) [34](keywords) [35](index)

    3.1.3. -v, --verbose (show progress)

   Show progress messages on stdout.

   ══════════════════════════════════════════════════════════════════════════

   [36](top) [37](keywords) [38](index)

  3.2. Preprocessor options

   ══════════════════════════════════════════════════════════════════════════

   [39](top) [40](keywords) [41](index)

    3.2.1. -atoctal (at is octal prefix)

   By default the at-character (@) is used as a binary number prefix.

   With the option [-atoctal](#3_2_1) it is used as the octal number prefix
   instead.

   ══════════════════════════════════════════════════════════════════════════

   [42](top) [43](keywords) [44](index)

    3.2.2. -dotdirective (period is directive prefix)

   By default the period (.) is used to signal that the next identifier is a
   label.

   With the option [-dotdirective](#3_2_2) it is used instead to signal that
   the next identifier is an assembler directive.

   ══════════════════════════════════════════════════════════════════════════

   [45](top) [46](keywords) [47](index)

    3.2.3. -hashhex (hash is hex prefix)

   By default the hash-character (#) is used to signal that the next
   expression should be compiled as an immediate value. This meaning,
   although common in assemblers, is a no-operation in z80asm.

   With the option [-hashhex](#3_2_3) the hash-character is used as the
   hexadecimal number prefix instead.

   ══════════════════════════════════════════════════════════════════════════

   [48](top) [49](keywords) [50](index)

    3.2.4. -labelcol1 (labels at column 1)

   By default z80asm needs either a period (.) prefix (but see
   [-dotdirective](#3_2_2)) or a colon (:) suffix to signal that an
   identifier is a label, and white space at the beginning of a line is not
   significant.

   With the option [-labelcol1](#3_2_4) an identifier is a label if started
   at column 1, or a directive or opcode if started after white space.

   ══════════════════════════════════════════════════════════════════════════

   [51](top) [52](keywords) [53](index)

    3.2.5. -ucase (upper case)

   By default z80asm is case-sensitive for identifiers, but case-insensitive
   for assembly keywords (opcodes, directives, registers and flags).

   The option [-ucase](#3_2_5) causes z80asm to convert all the symbols to
   upper-case, so that code that assumes case-insensitivity can be assembled.

   ══════════════════════════════════════════════════════════════════════════

   [54](top) [55](keywords) [56](index)

  3.3. Assembly options

   ══════════════════════════════════════════════════════════════════════════

   [57](top) [58](keywords) [59](index)

    3.3.1. -noprec (no precedence in expression evaluation)

   By default z80asm follows the C-precedence rules while evaluating
   expressions:

   Precedence Operators               Description               Associativity
   1          **         Power                                  right-to-left
   2          + - #      Unary plus, unary minus, immediate     right-to-left
   3          ! ~        Logical NOT and bitwise NOT            right-to-left
   4          * / %      Multiply, divide and remainder         left-to-right
   5          + -        Add and subtract                       left-to-right
   6          << >>      Bitwise left-shift and right-shift     left-to-right
   7          < <= > >=  Less, Less-equal, greater,             left-to-right
                         greater-equal
   8          = == != <> Equal (two forms), Not equal (two      left-to-right
                         forms)
   9          &          Bitwise AND                            left-to-right
   10         ^          Bitwise XOR                            left-to-right
   11         |          Bitwise OR                             left-to-right
   12         &&         Logical AND                            left-to-right
   13         ^^         Logical XOR                            left-to-right
   14         ||         Logical OR                             left-to-right
   15         ?:         Ternary conditional                    right-to-left

   With the [-noprec](#3_3_1) expressions are evaluated strictly
   left-to-right.

   ══════════════════════════════════════════════════════════════════════════

   [60](top) [61](keywords) [62](index)

  3.4. Environment Options

   ══════════════════════════════════════════════════════════════════════════

   [63](top) [64](keywords) [65](index)

    3.4.1. -IDIR, --inc-path=DIR (directory for source files)

   Append the specified directory to the search path for source and include
   files.

   While each source file is being assembled, its parent directory is
   automatically added to the search path, so that [INCLUDE](#10_18) can
   refer to include files via a relative path to the source.

   ══════════════════════════════════════════════════════════════════════════

   [66](top) [67](keywords) [68](index)

    3.4.2. -LDIR, --lib-path=DIR (directory for library)

   Append the specified directory to the search path for library files.

   ══════════════════════════════════════════════════════════════════════════

   [69](top) [70](keywords) [71](index)

  3.5. Code Generation Options

   ══════════════════════════════════════════════════════════════════════════

   [72](top) [73](keywords) [74](index)

    3.5.1. -mCPU, --cpu=CPU (select CPU)

   Assemble for the given CPU. The following CPU's are supported:

     CPU                 Name
   z80      Zilog [75]Z80
   z180     Zilog Z180
   z80n     ZX Next variant of the [76]Z80
   gbz80    GameBoy variant of the [77]Z80
   8080     Intel 8080 (1)
   8085     Intel 8085 (1)
   r2k      Rabbit RCM2000
   r3k      Rabbit RCM3000
   ti83     Texas Instruments TI83 (2)
   ti83plus Texas Instruments TI83Plus (2)

   Notes:

   (1) The Intel 8080 and 8085 are with Zilog or Intel mnemonics, except for
   the mnemonics that have different meanings, i.e.

   Intel     Zilog                        Comment
   JP nn JP P, nn       Must use Zilog mnemonic, as JP is ambiguous
   CP nn [78]CALL P, nn Must use Zilog mnemonic, as CP is ambiguous

   (2) The Texas Instruments CPU's are standard [79]Z80 , but the
   [INVOKE](#10_19) statement is assembled differently, i.e.

     CPU      Statement        Assembled as
   ti83     [80]INVOKE nn [81]CALL nn
   ti83plus [82]INVOKE nn RST 0x28 \ [83]DEFW nn

   ══════════════════════════════════════════════════════════════════════════

   [84](top) [85](keywords) [86](index)

    3.5.2. -IXIY, --IXIY (swap IX and IY)

   Swap all occurrences of registers IX and IY, and also their 8-bit halves
   (IXH, IXL, IYH and IYL).

   ══════════════════════════════════════════════════════════════════════════

   [87](top) [88](keywords) [89](index)

    3.5.3. --opt=speed (optimise for speed)

   Replace all occurrences of JR by JP, as the later are faster. DJNZ is not
   replaced by DEC B \ JP as the later is slower.

   ══════════════════════════════════════════════════════════════════════════

   [90](top) [91](keywords) [92](index)

    3.5.4. --debug (debug information)

   Add debug information to the map file: new symbols __C_LINE_nn and
   __ASM_LINE_nn are created on each C_LINE statement (supplied by the C
   compiler) and each asm line, and listed in the map file together with
   their source file location.

   ══════════════════════════════════════════════════════════════════════════

   [93](top) [94](keywords) [95](index)

  3.6. Output File Options

   ══════════════════════════════════════════════════════════════════════════

   [96](top) [97](keywords) [98](index)

    3.6.1. -m, --map (create map file)

   Creates a map file at the end of the link phase. The map file contains one
   line per defined symbol, with the following information:

     • symbol name
     • '='
     • aboslute address in the binary file in hexadecimal
     • ';'
     • 'const' if symbols is a constant, 'addr' if it is an address or
       'comput' if it is an expression evaluated at link time
     • ','
     • scope of the symbol: 'local', 'public', 'extern' or 'global'
     • ','
     • 'def' if symbol is a global define (defined with -Dsymbol or
       [DEFINE](#10_9)), empty string otherwise
     • ','
     • module name where symbol was defined
     • ','
     • section name where symbol was defined
     • ','
     • source file name where symbol was defined
     • ':'
     • source line number where symbol was defined

   ══════════════════════════════════════════════════════════════════════════

   [99](top) [100](keywords) [101](index)

4. Input Files

   z80asm reads text files in the syntax supported by the specific processor
   being assembled for (see [-mCPU](#3_5_1) option) and produces the
   corresponding object files.

   An input file with a .o extension is assumed to be already in object file
   format and is just read by the linker. Any other extension is considered
   an assembly source file (conventionally .asm).

   A project list file may be supplied in the command line prefixed by the
   at-sign (e.g. @project.lst). The list file contains one input file name
   per line, or another project list prefixed with an at-sign, which is
   opened recursively. Hash signs (#) and semi-colons (;) may be used at the
   start of lines in the list files to include comments.

   Both the command line and the list files support wild-cards to expand all
   the files that match the given pattern.

   Note that the Operating System may do its own wildcard expansion and the
   pattern may need to be quoted in the command line.

   A single star in a file name (*) expands to the list of all
   files/directories that match the complete pattern, where the star
   represents any sequence of characters. A double-star in a directory name
   (**) expands to the complete directory sub-tree, when searched
   recursively.

   ══════════════════════════════════════════════════════════════════════════

   [102](top) [103](keywords) [104](index)

  4.1. Source File Format

   The assembler parses source files with any of the common end-of-line
   termination sequences ("\r", "\n" or "\r\n"). Each line starts with an
   optional label and can contain assembly directives (i.e. instructions to
   the assembler), assembly instructions (i.e. code to be translated into
   object code for the specific processor) or blanks and comments.

   A single backslash character (\) may be used to separate multiple
   statements in a single line.

 org 0                     ; assembly directive
 start: push bc\pop hl     ; define a label and add two assembly opcodes
 ret                       ; assembly opcode can be at the first column

   Differently to most other assemblers, white space is not significant, i.e.
   a label can be defined after white space, and an opcode can be written at
   column 1 (but see option [-labelcol1](#3_2_4)).

   ══════════════════════════════════════════════════════════════════════════

   [105](top) [106](keywords) [107](index)

  4.2. Comments

   Comments may start with a semi-colon (;) or two slashes (//) and end at
   the end of the line, or may start with slash-star (/*) and end with
   star-slash (*/), possibly spanning multiple lines.

 ld a, 1                   ; this is a comment
 ld b, 2                   // another comment
 ld c, /* multi-line comment is valid
          in the middle of an instruction
       */ 3                ; C = 3

   ══════════════════════════════════════════════════════════════════════════

   [108](top) [109](keywords) [110](index)

  4.3. Symbols

   All symbols in the code (labels, variables, ...) are named with unique
   identifiers. Identifiers start with a letter or underscore (_), and can
   contain letters, digits, underscores or periods (.). Identifiers are
   case-sensitive (but see option [-ucase](#3_2_5)).

   ══════════════════════════════════════════════════════════════════════════

   [111](top) [112](keywords) [113](index)

  4.4. Labels

   A label is a symbol that represents the current assembly address (ASMPC)
   and is defined at the start of a line by prefixing a symbol with a period
   (.) (but see [-dotdirective](#3_2_2)) or suffixing it with a colon (:),
   i.e. either .label or label: (but see [-labelcol1](#3_2_4)).

   ══════════════════════════════════════════════════════════════════════════

   [114](top) [115](keywords) [116](index)

  4.5. Numbers

   The assembler accepts numbers in decimal, hexadecimal, octal and binary.
   Different syntaxes are allowed to simplify porting code written for other
   assemblers. Some of the prefix characters are also used as operators; in
   this case a space may be needed to signal the difference, e.g.

 ld a, %10     ; A = 2 (10 binary)
 ld a, 12 % 10 ; A = 2 (remainder of 12 divided by 10)

   All expressions are computed as signed integers with the host platform's
   integer size (32-bit or 64-bit in the most common platforms). Expression
   evaluation follows the operator precedence of C (but see
   [-noprec](#3_3_1)).

   The underscore can be used to separate groups of digits to help
   readability, e.g. 0xFFFF_FFFF is the same as 0xFFFFFFFF.

   Floating point numbers can be supplied with the FLOAT directive, that
   encodes them in the current floating point format in the object code.
   Floating point numbers must be supplied in decimal base and have an
   integer part and a fractional part separated by a period, followed by an
   optional e (exponent), a plus or minus sign, and the power of 10 to
   multiply to the base.

   ══════════════════════════════════════════════════════════════════════════

   [117](top) [118](keywords) [119](index)

    4.5.1. Decimal

   Decimal numbers are a sequence of decimal digits (0..9), optionally
   followed by a d or D - all prefixes and suffixes are case-insensitive.
   Leading zeros are insignificant - note the difference from C, where a
   leading zero means octal.

 ld a, 99
 ld a, 99d

   ══════════════════════════════════════════════════════════════════════════

   [120](top) [121](keywords) [122](index)

    4.5.2. Hexadecimal

   Hexadecimal numbers are a sequence of hexadecimal digits (0..9 and A..F,
   case-insensitive), either prefixed or suffixed with an hexadecimal marker.
   If the marker is a suffix, and the number starts with a letter, then a
   leading zero has to be added.

   The hexadecimal prefix $ is also the ASMPC identifier if not followed by a
   hexadecimal number, i.e. the address of the instruction being assembled.

   The hexadecimal prefix # is only recognised with the option
   [-hashhex](#3_2_3).

 ld a, $FF
 ld a, #FF           ; only with option  [-hashhex](#3_2_3)
 ld a, 0xFF
 ld a, 0FFh

   ══════════════════════════════════════════════════════════════════════════

   [123](top) [124](keywords) [125](index)

    4.5.3. Octal

   Octal numbers are a sequence of octal digits (0..7), either prefixed or
   suffixed with an octal marker.

   The octal-prefix @ is only recognised with the option [-atoctal](#3_2_1).

 ld a, @77           ; only with option  [-atoctal](#3_2_1)
 ld a, 0o77
 ld a, 0q77
 ld a, 77o
 ld a, 77q

   ══════════════════════════════════════════════════════════════════════════

   [126](top) [127](keywords) [128](index)

    4.5.4. Binary

   Binary numbers are a sequence of binary digits (0..1), either prefixed or
   suffixed with a binary marker.

   The binary prefix % is also the modulus operator, if not followed by a
   binary digit.

   The binary prefix @ is recognised unless the option [-atoctal](#3_2_1) is
   given.

 ld a, %11
 ld a, @11           ; except with option  [-atoctal](#3_2_1)
 ld a, 0b11
 ld a, 11b

   ══════════════════════════════════════════════════════════════════════════

   [129](top) [130](keywords) [131](index)

    4.5.5. Bitmaps

   Binary numbers can be specified as bitmaps, with # as 1 and - as 0, using
   the binary prefix (@ or %) immediately followed by a double-quoted string
   of hashes and dashes.

 defb @"---##---"
 defb @"-##--##-"
 defb %"-##-----"
 defb %"-##-----"
 defb @"-##--##-"
 defb @"---##---"

   ══════════════════════════════════════════════════════════════════════════

   [132](top) [133](keywords) [134](index)

  4.6. Keywords

   Processor registers (BC, DE, ...) and flags (NZ, Z, ...), and assembly
   ASMPC, representing the current assembly location, are reserved keywords.
   They cannot be used as identifiers, and are case-insensitive.

   ══════════════════════════════════════════════════════════════════════════

   [135](top) [136](keywords) [137](index)

  4.7. Directives and Opcodes

   Assembler directives ([ORG](#10_25), [INCLUDE](#10_18), ...) and processor
   opcodes (NOP, LD, ...) are interpreted as directives or opcodes when
   appearing at the start of the statement or after a label definition, or as
   regular identifiers otherwise. The directives and opcodes are
   case-insensitive.

 jr: jr jr  ; silly example, jr is both a label and an opcode
            ; while correct code, it's confusing, don't do it

   ══════════════════════════════════════════════════════════════════════════

   [138](top) [139](keywords) [140](index)

5. Object File Format

   The object and library files are stored in binary form as a set of
   contiguous sections. The files are cross-platform compatible, i.e. they
   can be created in a big-endian architecture and used in a little-endian
   one.

   The files start with a signature and a version number.

   A set of file pointers at the start of the object file point to the start
   of each section existing the in the file, or contain 0xFFFFFFFF (-1) if
   that section does not exist.

   The following object types exist in the file:

    Type   Size (bytes)                      Description
   char    1            ASCII character
   byte    1            unsigned 8-bit value
   word    2            unsigned 16-bit value, little-endian ( [141]Z80
                        /Intel)
   dword   4            signed 32-bit value, little-endian ( [142]Z80 /Intel)
   string  1+length     one byte with the string length followed by the
                        characters of the string
   lstring 2+length     one word with the string length followed by the
                        characters of the string

   ══════════════════════════════════════════════════════════════════════════

   [143](top) [144](keywords) [145](index)

  5.1. Object Files

   The format of the object files is as follows:

    Addr       Type       Value                   Description
   0       char[8]      "Z80RMF14" File signature and version
   8       dword        pmodule    File pointer to Module Name, always the
                                   last section
   12      dword        pexpr      File pointer to Expressions, may be -1
   16      dword        pnames     File pointer to Defined Symbols, may be -1
   20      dword        pextern    File pointer to External Symbols, may be
                                   -1
   24      dword        pcode      File pointer to Code Sections, may be -1
   pexpr                           Expressions: set of expressions up to end
                                   marker
           char         type       Type of expression
                        0          end marker
                        'U'        8-bit integer (0 to 255)
                        'S'        8-bit signed integer (-128 to 127)
                        'u'        8-bit integer (0 to 255) extended to 16
                                   bits
                        's'        8-bit signed integer (-128 to 127)
                                   sign-extended to 16 bits
                        'C'        16-bit integer, little-endian (-32768 to
                                   65535)
                        'B'        16-bit integer, big-endian (-32768 to
                                   65535)
                        'P'        24-bit signed integer
                        'L'        32-bit signed integer
                        'J'        8-bit jump relative offset
                        '='        Computed name at link time
                                   Source file name of expression definition,
           lstring      sourcefile empty to reuse same from previous
                                   expression
           dword        linenumber Line number in source file of expression
                                   definition
           string       section    Section name of expression definition
                                   Relative module code address of the start
           word         ASMPC      of the assembly instruction to be used as
                                   ASMPC during expression evaluation
                                   Relative module code patch pointer to
           word         patchptr   store the result of evaluating the
                                   expression
                                   Name of the symbol that receives the
           string       targetname result of evaluating the expression, only
                                   used for '=' type expressions, empty
                                   string for the other types
           lstring      expression Expression text as parsed from the source
                                   file
                                   ... repeat for every expression ...
   pnames                          Defined Symbols: set of defined symbols up
                                   to end marker
           char         scope      Scope of the symbol:
                        0          end marker
                        'L'        is local
                        'G'        is global
           char         type       Type of symbol:
                        'A'        Relocatable address
                        'C'        Constant
                                   Symbol computed at link time, the
                        '='        corresponding expression is in the
                                   Expressions section
           string       section    Section name of symbol definition
                                   Absolute value for a constant, or the
           dword        value      relative address to the start of the code
                                   block for a relocatable address
           string       name       Name of symbol
           string       sourcefile Source file name of symbol definition
           dword        linenumber Line number in source file of symbol
                                   definition
                                   ... repeat for every symbol ...
   pextern                         External Symbols: set of external symbols
                                   referred in the module, up Module Name
           string       name       Name of external symbol
                                   ... repeat for every symbol ...
   pmodule string       modname    Module Name: Name of the module
   pcode                           Code Sections: set of sections of binary
                                   code, up to end marker
           dword        length     Code length, -1 to signal the end
           string       section    Section name of code
                                   User defined [146]ORG address for the
                                   start of this section, -1 for no [147]ORG
                                   address was defined, or -2 to split
                                   section to a different binary file. If
           dword        origin     multiple sections are given with an
                                   [148]ORG address each, the assembler
                                   generates one binary file for each section
                                   with a defined [149]ORG , followed by all
                                   sections without one.
                                   Address alignment of this section, -1 if
           dword        align      not defined. The previous section is
                                   padded to align the start address of this
                                   section.
           byte[length] code       Binary code
                                   ... repeat for every section ...

   ══════════════════════════════════════════════════════════════════════════

   [150](top) [151](keywords) [152](index)

  5.2. Library File Format

   The library file format is a sequence of object files with additional
   structures.

   Addr     Type       Value                     Description
   0    char[8]      "Z80LMF14" File signature and version
   obj                          Object File Block, repeats for every object
                                module
        dword        next       File pointer of the next object file in the
                                library, -1 if this is the last one
                                Length of this object file, or 0 if this
        dword        length     object files has been marked "deleted" and
                                will not be used
        byte[length] obj        Object file
                                ... repeat for every object file ...

   ══════════════════════════════════════════════════════════════════════════

   [153](top) [154](keywords) [155](index)

  5.3. Format History

   Version                              Comment
   01      original z80asm version
   02      allow expressions to use standard C operators instead of the
           original (legacy) z80asm specific syntax.
           include the address of the start of the assembly instruction in
   03      the object file, so that expressions with ASMPC are correctly
           computed at link time; remove type 'X' symbols (global library),
           no longer used.
   04      include the source file location of expressions in order to give
           meaningful link-time error messages.
   05      include source code sections.
   06      incomplete implementation, fixed in version 07
           include [156]DEFC symbols that are defined as an expression using
   07      other symbols and are computed at link time, after all addresses
           are allocated.
   08      include a user defined [157]ORG address per section.
   09      include the file and line number where each symbol was defined.
   10      allow a section alignment to be defined.
   11      allow big-endian 16-bit expressions to be patched; these
           big-endian values are used in the ZXN coper unit.
   12      allow the target expression of relative jumps to be computed in
           the link phase
   13      add 8-bit signed and unsigned values extended to 16-bits
   14      add 24-bit pointers

   ══════════════════════════════════════════════════════════════════════════

   [158](top) [159](keywords) [160](index)

6. z80asm Syntax

                      THE [161]Z80 CROSS ASSEMBLER (z88dk)

   Version: v2.6.1 (October 3rd, 2014)

   Thank you for purchasing a copy of this cross assembler. We have made an
   effort to program an easy user interface and efficient assembler source
   file compiling. The object file and library format is an invention of our
   own and has also been included in this documentation. We hope that you
   will enjoy your [162]Z80 machine code programming with our assembler.

   We have made an effort to produce a fairly easy-to-understand
   documentation. If you have any comments or corrections, please don't
   hesitate to contact us:

   Gunther Strube
   Gl. Kongevej 37, 4.tv.
   DK-1610 Kobenhavn V
   Denmark
   e-mail [163]gbs@image.dk

1. Running the assembler

   ══════════════════════════════════════════════════════════════════════════

   [164](top) [165](keywords) [166](index)

  6.1. Command line

   The syntax of the assembler parameters is a straightforward design.
   Filenames or a project file are always specified. The options may be left
   out:

 z80asm [options] <filename {filename}> | <@modulesfile>

   As seen above <options> must be specified first. Then you enter the names
   of all files to be assembled. You either choose to specify all file names
   or a @<project-file> containing all file names. File name may be specified
   with or without the 'asm extension. The correct filename parsing is
   handled automatically by the assembler. As seen on the syntax at least one
   source file must be specified and may be repeated with several file names.
   Only one project file may be specified if no source file names are given.

   Many of the parameters are preset with default values which gives an easy
   user interface when specifying the assembly parameters. Only advanced
   parameters need to be specified explicitly. The help page displays the
   default parameter values at the bottom of the page.

   ══════════════════════════════════════════════════════════════════════════

   [167](top) [168](keywords) [169](index)

  6.2. Command line options

   Options are used to control the assembly process and output. They are
   recognised by the assembler when you specify a leading minus before the
   option identifier ('-'). Options are always specified before file names or
   project files.

   When the assembler is executed options are all preset with default values
   and are either switched ON or OFF (active or not). All options have a
   single letter identification. Upper and lower case letters are
   distinguished, which means that 'a' might be different command than 'A'.
   If an option is to be turned off, you simply specify a 'n' before the
   identification, e.g. -nl which selects listing files not to be created by
   the assembler.

   ══════════════════════════════════════════════════════════════════════════

   [170](top) [171](keywords) [172](index)

    6.2.1. -e<ext> : Use alternative source file extension

   The default assembler source file extension is ".asm". Using this option,
   you force the assembler to use another default extension, like ".opt" or
   ".as" for the source file.

   The extension is specified without the ".". Only three letters are
   accepted - the rest is discarded.

   ══════════════════════════════════════════════════════════════════════════

   [173](top) [174](keywords) [175](index)

    6.2.2. -M<ext> : Use alternative object file extension

   The default assembler object file extension is ".obj". Using this option,
   you force the assembler to use another default extension, like ".o" as the
   object file name extension.

   The extension is specified without the ".". Only three letters are
   accepted - the rest is discarded.

   ══════════════════════════════════════════════════════════════════════════

   [176](top) [177](keywords) [178](index)

    6.2.3. -l : Create listing file output

   The information in listing files is a combination of the original source
   file and additional information of the generated machine code. Further,
   the listing file is page formatted with a header specifying the date and
   time of the compilation, the filename of the listing and a page number.

   For each line of the source file the following information is written:

 <source file line number> <assembler address>
 <machine code hex dump> <source line>

   The machine code and assembler address output are written in hexadecimal
   notation. If the machine code uses more the 4 bytes, the source file line
   is written on the following line. This usually happens when you have
   defined a string constant or a relatively large amount of constant
   definitions.

   The assembler address is always beginning at zero, i.e. the beginning of
   the current modules' machine code. In a relocated context of the machine
   code, where all code is positioned at fixed addresses, you will have the
   opportunity to view the addresses of your code relative to the start of
   individual modules using the assembler output addresses. Further, the last
   assembler address can be interpreted as the size of the modules' generated
   machine code.

   Listing files also serves the purpose of a hard copy on paper of your
   programs, and are useful in a debugging phase (identifying opcodes versus
   the mnemonic representation of instructions).

   The creation of listing files imposes much more processing work of the
   assembler. If you want to compile your code as quickly as possible then
   don't create listing files. Listing files obtain their file name from the
   base of the source filename, and is added with the 'lst' extension.

   ══════════════════════════════════════════════════════════════════════════

   [179](top) [180](keywords) [181](index)

    6.2.4. -s : Create symbol table

   Symbol tables contains the integer form of symbolical names and constants
   that has been parsed and generated during a compilation of a source file.
   The structure of the symbol table is divided into two columns. The first
   contains the parsed symbol names, converted to uppercase. The second
   column contains the generated value of the symbol name.

   All symbol values are displayed in signed 32-bit hexadecimal notation.

   The two columns are separated by tabulators which represents a default
   value of 8 spaces per tabulator. The width of the symbol name column is
   defined as the tabulator distance multiplied by 4. The default width of
   the name column is 4 * 8 = 32 spaces.

   The symbol table will be written to the end of the appropriate listing
   file, if listing file and symbol table output is enabled. If no listing
   file output is enabled, the symbol table will be written to a separate
   file, identified with the base name of the source file module and given
   the 'sym' extension.

   ══════════════════════════════════════════════════════════════════════════

   [182](top) [183](keywords) [184](index)

    6.2.5. -d : Assemble only updated files

   Assemblers usually force compiles all specified files. This is also
   possible (as default) for the [185]Z80 Module Assembler. In large
   application project with 15 modules or more it can be quite frustrating to
   compile all every time. The solution is to only assemble updated files and
   leave the rest (since they have been compiled to the programmers
   knowledge).

   But in a long term view it is better to just compile a project without
   thinking of which files need to be compiled or not. That can be done with
   the [186]Z80 Module Assembler. By simply specifying the [187]-d parameter
   at the command line, only updated source files are assembled into object
   files - the rest are ignored.

   Using the [188]-d option in combination with a project file gives the best
   project setup for a large compilation; compile your projects without
   worrying about which module is updated or not.

   ══════════════════════════════════════════════════════════════════════════

   [189](top) [190](keywords) [191](index)

    6.2.6. -b : Link/relocate object files

   The [192]-b option must be used if you want to create an executable
   [193]Z80 machine code output file of your previously created object files.
   You may also use the [194]-a option which is identical in functionality
   but also includes the [195]-d option. In other words assemble only updated
   source modules and perform linking/relocation of the code afterwards.

     • Pass 1:
       When the linking process begins with the first object module, it is
       examined for an [196]ORG address to perform the absolute address
       relocation of all the object module machine code. The [197]ORG
       (loading address for memory) will have to be defined in the first
       source file module. If not, the assembler will prompt you for it on
       the command line. The [198]ORG address must be typed in hexadecimal
       notation. If you never use the [199]ORG directive in your source
       files, you can always explicitly define one at the command line with
       the [200]-r option.

       The next step in the linking process is loading of the machine code
       from each object module, in the order of the specified modules. Pass 1
       is completed with loading all local and global symbol definitions of
       the object modules. All relocatable address symbols are assigned the
       correct absolute memory location (based on [201]ORG ).

     • Pass 2:
       The address patching process. All expressions are now read and
       evaluated, then patched into the appropriate positions of the linked
       machine code.

       When all expressions have been evaluated the machine code is completed
       and saved to a file named as the first source file module, and
       assigned the 'bin' extension.

   ══════════════════════════════════════════════════════════════════════════

   [202](top) [203](keywords) [204](index)

    6.2.7. -a : Combine -d and -b

   Same as providing both [205]-b (link/relocate object files) and [206]-d
   (assemble only updated files).

   ══════════════════════════════════════════════════════════════════════════

   [207](top) [208](keywords) [209](index)

    6.2.8. -o<binary-filename> : Binary filename

   Define another filename for the compiled binary output than the default
   source filename of the project, appended with the ".bin" extension.

   ══════════════════════════════════════════════════════════════════════════

   [210](top) [211](keywords) [212](index)

    6.2.9. -r<hex-address> : Re-define the ORG relocation address

   During the linking phase of the assembler the [213]ORG address that
   defines the position in memory where the code is to be loaded and
   executed, is fetched from the first object module file. You can override
   this by specifying an explicit address origin by entering the [214]-r
   option followed by an address in hexadecimal notation at the command line,
   e.g.:

 z80asm  [-b](#6_2_6)  -r4000 file.asm

   which specifies that your code is to be relocated for address 4000h
   (16384) onward.

   Using the [215]-r option supersedes a defined [216]ORG in the object file.
   You could for example have defined the [217]ORG to 8000h (32768) in your
   first source file, then compiled the project. This would have generated
   machine code for memory location 8000h (segment 2 in the Cambridge
   [218]Z88 ). Since the object files are generated it is easy to link them
   again with another [219]ORG address by just using the [220]-r option. The
   linking process does not alter the information in object files - they are
   only read. The same project could then easily be re-linked to another
   address, e.g.

 z80asm  [-b](#6_2_6)  -r2000 file.asm

   ══════════════════════════════════════════════════════════════════════════

   [221](top) [222](keywords) [223](index)

    6.2.10. -R : Generate address independent code

   The [224]Z80 processor instruction set allows only relative jumps in
   maximum +/- 128 bytes using the JR and DJNZ instructions. Further, there
   is no program counter relative call-to-subroutine or jump-to-subroutine
   instruction. If you want a program to be address-independent no absolute
   address references may be used in jump or call instructions. If you want
   to program [225]Z80 address independent code you can only write small
   routines using the JR and DJNZ instructions. With a restricted interval of
   128 bytes you can imagine the size of those routines! Programming of large
   applications using address Independence is simply impossible on the
   [226]Z80 processor with the basic instruction set available. You can only
   define a fixed address origin ( [227]ORG ) for your machine code to be
   loaded and executed from. However, there is one solution: before the code
   is executed an automatic address-relocation is performed to the current
   position in memory. This is done only once. The penalty is that the
   program fills more space in memory. This is unavoidable since information
   must be available to define where the address relocation has to be
   performed in the program. Further, a small routine must be included with
   the program to read the relocation information and patch it into the
   specified locations of the program. It is impossible to determine the
   extra size generated with a relocation table. We assume an extra size of 3
   - 3.5K for a typical 16K application program.

   You can generate address independent code using the [228]-R option
   accompanied with the [229]-a or [230]-b option. There is no other
   requirements. The relocatable code may be useful for programmers using the
   Cambridge [231]Z88 who want to use machine code in the BBC BASIC
   application environment. This can easily be interfaced with the DIM
   statement to allocate memory for the machine code program, and issue a
   [232]CALL or USR() to execute the machine code.

   Please note that the linking process with the [233]-R option addresses
   your code from 0 onward. This is necessary when the runtime relocation is
   performed by the relocator (just before your program is executed). This
   can be examined by loading the address map file into a text editor.

   The principle of relocation is in fact a self-modifying program. You
   cannot relocate a program that has been blown into an EPROM (cannot be
   modified). You may only execute relocatable programs in dynamic memory
   (RAM).

   The relocator is built into the [234]Z80 Module Assembler. The relocation
   table is created during the linking phase. When all object modules have
   been linked and the appropriate machine code generated, the process is
   ended with first copying the relocator routine into the executable file,
   then a relocation table and finally the compiled machine code program. Any
   defined [235]ORG in your code is superseded - this is not necessary in a
   relocatable program!

   Two rules must be obeyed when using relocatable programs:

    1. The IY register must have been set up to point at the address where
       your program resides. The first code is in fact the relocator which
       manipulates your code on the basis of the IY register. If IY is not
       setup properly your machine code program will be relocated for an
       address it is not resided at. On execution your might then call a
       random address (on the basis of the random IY register).

    2. Don't use the alternate register set for parameter passing between the
       caller (of your code) in the main code and the relocated program. The
       following registers are affected by the initial relocation process:

 AFBCDEHL/IXIY/........ same
 ......../..../afbcdehl different

   You still have all the main registers for parameter passing which is more
   than sufficient for average programming.

   When your address-independent code is stored to the file, a message is
   displayed which informs the user of how many bytes the relocation header
   consists of. This constant is useful since it informs you of the distance
   between the relocation header and the start of your code. The map file
   automatically reflects the relocation header. All addresses of your code
   has been modified to include the relocation header. Please note that all
   addresses in the map file are defined from address 0. When your code is
   placed in an absolute memory address, and you need to perform a debugging
   session, you can find your specific label address by adding the constant
   from the map file to the memory origin of your code. The inbuilt relocator
   routine may be examined by extracting the "relocate.asm" file from the "
   [236]Z80 src.zip" compressed file resource.

   ══════════════════════════════════════════════════════════════════════════

   [237](top) [238](keywords) [239](index)

    6.2.11. -g : Create global address definition file

   With this option it is possible to generate a [240]DEFC directive
   definition file of all globally declared identifiers in a file project
   (declared with the [241]XDEF directive). These global definitions are
   calculated from the specified [242]ORG address (from first module or the
   [243]-r option). This feature is very useful, if you want to get access to
   routines from a separate compilation. If the two code compilation were
   placed in different banks of the [244]Z88 , it would be possible to know
   the correct address of a routine just by using the [245]DEFC address
   definition previously compiled. We used this facility to access routines
   in the two 8K halves of the segment 0 debugged version. This debugger
   actually swaps one of the two 8K blocks in and out of segment 0 when
   needed to call an 'external' routine. Applications on the [246]Z88 may
   only access the upper 8K of segment 0. A 16K application therefore needs
   to be split in 8K halves and paged in when needed to be run in this area.
   Tuff!

   ══════════════════════════════════════════════════════════════════════════

   [247](top) [248](keywords) [249](index)

    6.2.12. -D<symbol> : Define a static symbol

   This option is useful if you want to produce conditional compilations. The
   symbol defined here will be active throughout the compilation. We used
   this feature to compile machine code on different computer platforms (QL,
   IBM, LINUX or [250]Z88 ). Specify the symbol immediately after the option
   identifier, i.e.

 z80asm  [-b](#6_2_6)  -DZ88 file.asm

   ══════════════════════════════════════════════════════════════════════════

   [251](top) [252](keywords) [253](index)

    6.2.13. @<project-file> :1.3.16. Using a project file

   Project files defines all file names of a project. The file name standard
   stored in a project file obeys the operating system notation.

   Instead of specifying every module file name at the command line, a simple
   reference of a project file can be made instead. According to the rules of
   the specification of parameters you specify either your source file
   modules or use a project file. The project file specification is of course
   much faster. An example:

 z80asm  [-a](#6_2_7)  main pass1 pass2 link asmdrctv z80instr

   This command line will compile all specified module file names into a
   single executable file called "main.bin". However if a project file
   'assembler' were created already containing the same file names, the
   command line would have been:

 z80asm  [-a](#6_2_7)  @assembler

   - much easier!

   A project file only contains file names. Each file name is separated by a
   newline character \n. The new line character may be different on various
   computer platforms - but the assembler interprets it correctly. The
   contents of a project file may look like this:

 z80asm
 z80pass1
 z80pass1
 modlink

   Project files are easily created using a simple text editor.

   ══════════════════════════════════════════════════════════════════════════

   [254](top) [255](keywords) [256](index)

    6.2.14. -i<library-file> : Include library modules during linking/relocation

   This option allows compilation time linking of external machine code,
   better known as library routines. Much, much programming time can be saved
   by producing a set of standard routines compiled into library files. These
   may then be included later in application project compilations. The
   command line option allows specification of several library files. For
   each library reference in an application module, all library files will be
   scanned for that particular module. The filename (inclusive directory
   path) of the library may be specified explicitly on the command line
   immediately after the [257]-i identifier.

   Library files are recognised by the ".lib" extension.

   ══════════════════════════════════════════════════════════════════════════

   [258](top) [259](keywords) [260](index)

    6.2.15. -x : Create a library

   A library file is composed of object files surrounded by a few file
   structures. The library file format (and object file format) may be found
   at the end of this documentation. A library is simply a set of independent
   routines (that may refer to each other) put together in a sequential form.
   You may only specify a single [261]-x option on the command line. A
   filename may be explicitly defined (including device and path information)
   to determine the storage location of the library. A library routine must
   be defined using a simple [262]XLIB directive with an identical address
   name label definition. Please refer to further information later in this
   documentation. The " [263]Z80 lib.zip" contains the standard library with
   all corresponding source files. Have a look at them - they clearly
   displays how to compose a library routine.

   One very important aspect of libraries is the time that the assembler
   spends searching through them. To optimize the search you should place
   your routines in a "topological" order, i.e. routines that access other
   library routines should be placed first. In most situations you avoid
   redundant sequential searching through the library.

   ══════════════════════════════════════════════════════════════════════════

   [264](top) [265](keywords) [266](index)

    6.2.16. -t<number> : Define tabulator distance for text output files

   To save storage space the [267]Z80 cross assembler output files (listing,
   map, symbol and [268]XDEF definition files) uses a tabulator control
   character instead of spaces. The benefit is about 30% compressed files.

   The tabulator distance defines the distance of space between each
   tabulator it represents. The default value is 8 spaces per tabulator.

   The tabulators are used to separate two columns of information. The first
   column contains a name of some sort. Since names have variable length, a
   size of the column is defined. The Assembler defines the size of the
   column by multiplying the current tabulator distance with 4, i.e. giving a
   default size of 4*8 = 32 'spaces'. This is usually more than enough for
   most name definitions parsed from source files.

   You may redefine the tabulator distance by using the [269]-t option
   immediately followed by a decimal number, e.g. -t4 for defining a
   tabulator distance of 4. The width of the first column will then be 4*4 =
   16 'spaces'.

   ══════════════════════════════════════════════════════════════════════════

   [270](top) [271](keywords) [272](index)

    6.2.17. -RCMX000 : Support the RCM2000/RCM3000 series of Z80-like CPU's

   This option disables assembly opcodes not available in the RCM2000/RCM3000
   series of [273]Z80 -like CPU's.

   ══════════════════════════════════════════════════════════════════════════

   [274](top) [275](keywords) [276](index)

    6.2.18. -plus : Support for the Ti83Plus

   Defines how the [277]INVOKE command is coded: either as a RST 28H
   instruction (option on) or as a regular [278]CALL instruction (option
   off).

   ══════════════════════════════════════════════════════════════════════════

   [279](top) [280](keywords) [281](index)

    6.2.19. -C : Enable LINE directive

   Enables the [282]LINE directive to synchronize error message line numbers
   with the line numbers from the source file.

2. An overview of assembler features and related files

   ══════════════════════════════════════════════════════════════════════════

   [283](top) [284](keywords) [285](index)

  6.3. The Z88 operating system definition files

   You will find header files containing all operating system definitions as
   defined in the [286]Z88 Developers' Notes V3 in the "OZdefc.zip" file.
   This makes the operating system interface programming a lot easier.

   ══════════════════════════════════════════════════════════════════════════

   [287](top) [288](keywords) [289](index)

  6.4. The supplied standard library Z80 source files

   We have supplied a standard library with useful routines for both
   beginners and professional machine code programmers. All source files are
   supplied for having the opportunity to study and improve the routines.
   However some routines are programmed especially for the [290]Z88 operating
   system and may not be of use for other [291]Z80 based computers unless
   thoroughly rewritten. The standard library source files may be found in
   the " [292]Z80 lib.zip" file.

   ══════════════════════════════════════════════════════════════════════════

   [293](top) [294](keywords) [295](index)

  6.5. Z88 module assembler application source

   We have supplied the complete source of the [296]Z88 module assembler
   application. This allows you to evaluate many aspects of programming
   applications on the [297]Z88 . Further, most features of the assembler are
   mirrored in these source files; using directives, the free format of
   [298]Z80 mnemonics, library routine access, modular file design, labels,
   using expressions, comments, data structure manipulation and good
   programming design.

   ══════════════════════════════════════════════════════════════════════════

   [299](top) [300](keywords) [301](index)

  6.6. File based compilation

   This assembler is completely file based, i.e. all parsing and code
   generation is manipulated via files on storage medias such as harddisks or
   floppy disks (or file based RAM-discs).

   ══════════════════════════════════════════════════════════════════════════

   [302](top) [303](keywords) [304](index)

  6.7. Modular source file design

   A compilation may be split into individual source files that either can be
   linked together during assembly as a single module or assembled as
   separate source file modules. Separate source file modules saves
   compilation time and memory. Further, this design is much more
   straightforward and much more logically clear in a design phase of a large
   compilation project than one huge kludge of a source file.

   ══════════════════════════════════════════════════════════════════════════

   [305](top) [306](keywords) [307](index)

  6.8. Scope of symbols in source modules

   All source modules may refer to each others symbols by using [308]EXTERN
   directives. This means that you refer to external information outside the
   current source module. The opposite of an external module reference is to
   declare symbols globally available using a [309]PUBLIC directive, i.e.
   making symbols available to other source modules. Finally it is possible
   to have local symbols that are not known to other source modules than the
   current. A label or constant that has not been declared with [310]EXTERN ,
   [311]PUBLIC or [312]GLOBAL is local to the module.

   ══════════════════════════════════════════════════════════════════════════

   [313](top) [314](keywords) [315](index)

  6.9. Using arithmetic and relational expressions

   All directives that require a numerical parameter or [316]Z80 mnemonics
   that use an integer argument may use expressions. Expressions may be
   formed by all standard arithmetic operators and relational operators. Even
   binary operators are implemented. All expressions may contain external
   identifiers and is automatically resolved during the linking phase. Only
   certain directives require compilation time evaluable expressions.

   ══════════════════════════════════════════════════════════════════════════

   [317](top) [318](keywords) [319](index)

  6.10. Free format of assembler source files

   The source files may be written in a free format. No fixed position
   columns as needed as in the COBOL programming language. All text may be
   typed in mixed case (the assembler converts all text input to uppercase).
   Tabulators may be used freely (instead of spaces which also saves source
   file space) to suit the programmers own habits of structured text layouts.
   However, one rule must be obeyed: syntax of [320]Z80 assembler mnemonics
   and most directives must be completed on individual lines. Text files
   using different OS dependant line feed standard are parsed properly; line
   feed types CR, LF or CRLF are automatically recognized. So you can easily
   compile your sources from Linux/UNIX on an MSDOS platform.

   ══════════════════════════════════════════════════════════════════════════

   [321](top) [322](keywords) [323](index)

  6.11. Specification of filenames

   Specification of file names in source files are always enclosed in double
   quotes. The assembler just collects the filename string and uses this to
   open a file. This way all filename standards may be used as defined on
   different operating system platforms.

   ══════════════════════════════════════════════════════════════════════════

   [324](top) [325](keywords) [326](index)

  6.12. Including other source files into the current source file

   The need for header file information such as operating system constants or
   data structures is often indispensable for source file modules. Instead of
   copying the contents of those files into each module, it is possible to
   include them at run time (during parsing). Infinite include file levels
   are permitted, i.e. included files calling other files.

   ══════════════════════════════════════════════════════════════════════════

   [327](top) [328](keywords) [329](index)

  6.13. Conditional assembly in source file modules

   Large compilation projects often need to compile the application in
   several variations. This can be achieved with enclosing parts of the
   source with conditional directives for the different variations of the
   application. This may also be useful if the assembler source is ported to
   several platforms, where inclusion of other source files (such as header
   files) are using different filename standards. The conditional directives
   [330]IF , [331]IFDEF , [332]IFNDEF , ELSE, and ENDIF may be nested into
   infinite levels.

   ══════════════════════════════════════════════════════════════════════════

   [333](top) [334](keywords) [335](index)

  6.14. Undocumented Z80 instruction code generation

   We have included the syntax parsing and code generation of the
   undocumented [336]Z80 instructions for the sake of completeness. However,
   IM 2 interrupts must be disabled before they are executed (an interrupt
   may otherwise occur in the middle of the instruction execution). Many
   games on the ZX Spectrum have used them to protect the code from prying
   eyes. The [337]Z88 native debugger code uses some of the undocumented
   instructions for fast access to register variables.

   ══════════════════════════════════════════════════════════════════════════

   [338](top) [339](keywords) [340](index)

  6.15. Object file generation

   The [341]Z80 Module Assembler generates object files that contains the
   compressed version of an assembled source module. The information herein
   contains declared symbols (local, global and external), expressions,
   address origin, module name and machine code. The object file modules are
   much smaller than their source file counterparts (often smaller than 2K).

   ══════════════════════════════════════════════════════════════════════════

   [342](top) [343](keywords) [344](index)

  6.16. Transfer of object files across platforms

   The [345]Z80 Module Assembler is already implemented on several different
   computer platforms. You may freely transfer the object files and use them
   as a part of another cross-compilation. There is no system-dependent
   information in the object files.

   ══════════════════════════════════════════════════════════════════════════

   [346](top) [347](keywords) [348](index)

  6.17. Date stamp controlled assembly

   To avoid unnecessary compilation of source file modules, it is possible to
   let the assembler compile only recently updated source file modules by
   comparing the date stamp of the source and the object file modules. Source
   file modules that are older than object file modules are ignored. This
   facility is indispensable in large compilation projects.

   ══════════════════════════════════════════════════════════════════════════

   [349](top) [350](keywords) [351](index)

  6.18. Listing files

   The assembler may generate listing files that contain a copy of the source
   file with additional code generation information of [352]Z80 mnemonics
   dumped in hexadecimal format. The listing files are formatted with page
   headers containing time of assembly and the filename. Line numbers are
   included which corresponds to the source file lines.

   ══════════════════════════════════════════════════════════════════════════

   [353](top) [354](keywords) [355](index)

  6.19. Symbol information

   All symbol generated values used in source modules may be dumped to the
   end of the listing file or as a separate symbol file. If the symbol table
   is dumped into the listing file, each symbol will be written with page
   references of all occurrences in the listing file. Address symbols
   (labels) are addressed relative to the start of the module. Symbol
   constants are written as defined in the source. The symbol table is
   written in alphabetical order with corresponding values in hexadecimal
   format.

   ══════════════════════════════════════════════════════════════════════════

   [356](top) [357](keywords) [358](index)

  6.20. Linking and relocation of object modules into executable Z80 machine
  code

   To obtain an executable [359]Z80 machine code file it is necessary to link
   all assembled object modules and relocate them at a defined address, where
   the code is to be executed at in the computers' memory. The linking &
   relocation is performed automatically after completed assembly of all
   specified source file modules. The [360]ORG relocation address is
   specified in the first object module.

   ══════════════════════════════════════════════════════════════════════════

   [361](top) [362](keywords) [363](index)

  6.21. Address map files

   The address map is invaluable information during a debugging session of
   your compiled program. This file contains all symbolical address labels
   with their generated address constants after a completed
   linking/relocation of all modules into executable machine code. The map
   file is ordered in two groups; the first list contains all symbol names
   ordered alphabetically with corresponding address constants, the second
   list contains all symbols ordered by their address value (in chronological
   order).

   ══════════════════════════════════════════════════════════════════════════

   [364](top) [365](keywords) [366](index)

  6.22. Symbol address definition files

   As with address map files this contains information of globally declared
   symbolical address labels, relocated to their absolute position as for the
   compiled machine code file. However, the format is completely different;
   all symbols are created as constant definitions to be included as a header
   file into another source file and assembled. This is useful if you want to
   call subroutines compiled separately in another project (originated in a
   different memory setup).

   ══════════════════════════════════════════════════════════════════════════

   [367](top) [368](keywords) [369](index)

  6.23. Error files

   Error files are created by the assembler during processing. If any errors
   should occur, they will be written to stderr and copied to this file
   containing information of where the error occurred in the source module.
   If no errors were found, the error file is automatically closed and
   deleted.

   ══════════════════════════════════════════════════════════════════════════

   [370](top) [371](keywords) [372](index)

  6.24. Creating and using object file libraries for standard routines

   Machine programmers often re-use their standard routines. We have
   implemented a file format for generating libraries using the existing
   object file modules. Using a simple set of rules makes it very easy to
   create your own libraries from your source file modules. Documentation of
   the library file format is included in this documentation. At command line
   infinite number of libraries may be specified. All will be searched during
   linking of your object modules for referenced library routines.

   ══════════════════════════════════════════════════════════════════════════

   [373](top) [374](keywords) [375](index)

7. Z80 module assembler file types

   ══════════════════════════════════════════════════════════════════════════

   [376](top) [377](keywords) [378](index)

  7.1. The assembler file types and their extension names

   The [379]Z80 Module Assembler uses several different filename extensions
   to distinguish the type of files processed. The base name of the source
   file is used to create the various assembler output file types. The
   following chapters explains the available files.

   ══════════════════════════════════════════════════════════════════════════

   [380](top) [381](keywords) [382](index)

  7.2. The file name extension identifier

   The file name extension identifier may be different from platform to
   platform. UNIX has no defined standard. MSDOS and TOS uses '.'. QDOS uses
   the '_' identifier. SMSQ also allows the '.' extension identifier.

   The Assembler implemented on the supplied platforms is defined with the
   correct extension identifier. You can see this on the Assembler help page
   (executing the program with no parameters).

   ══════════════════════════════════════════════════════════════════════════

   [383](top) [384](keywords) [385](index)

  7.3. File types

   ══════════════════════════════════════════════════════════════════════════

   [386](top) [387](keywords) [388](index)

    7.3.1. The source file extension, asm

   The extension for assembler mnemonic source files is 'asm'. Source files
   are specified by the user with or without the extension - whatever chosen,
   the assembler will investigate automatically what is needed to read the
   source files.

   You may override the default extension with the [389]-e option.

   ══════════════════════════════════════════════════════════════════════════

   [390](top) [391](keywords) [392](index)

    7.3.2. The object file extension, obj

   The extension for object files is 'obj'. The base file name is taken from
   the corresponding source file name. This file is generated by the
   assembler from parsing the source file and contains intermediate generated
   machine code, an address origin of the machine code, symbol information
   and expressions.

   You may override the default extension with the [393]-M option.

   ══════════════════════════════════════════════════════════════════════════

   [394](top) [395](keywords) [396](index)

    7.3.3. The error file extension, err

   The extension for error files is 'err'. Before beginning processing the
   source files, an error file is created. If any errors should occur, they
   will be written to this file containing information of where the error
   occurred. If no error were found, the error file is automatically closed
   and deleted.

   Error files are simple text files that can be loaded by any text editor
   for evaluation.

   ══════════════════════════════════════════════════════════════════════════

   [397](top) [398](keywords) [399](index)

    7.3.4. The listing file extension, lst

   The extension for listing files is 'lst'. The base file name is taken from
   the corresponding source file name. This file is generated by the
   assembler and contains a hexadecimal output of the generated machine code
   that corresponds to the [400]Z80 mnemonic instruction or directive,
   followed by a copy of the original source line. If selected, the symbol
   table is dumped at the end of the listing file.

   ══════════════════════════════════════════════════════════════════════════

   [401](top) [402](keywords) [403](index)

    7.3.5. The symbol file extension, sym

   The extension for symbol table files is 'sym'. The base file name is taken
   from the corresponding source file name. The symbol table file contains
   information about the defined and used symbols of the source file and
   their generated values (labels and constants). The symbol file is only
   created if listing file output is disabled.

   ══════════════════════════════════════════════════════════════════════════

   [404](top) [405](keywords) [406](index)

    7.3.6. The executable file extension, bin

   The extension for executable [407]Z80 machine code files is 'bin'. The
   base file name is taken from the first specified source file name at the
   command line (or project file). This is the linked and relocated output of
   object files and may be executed by the [408]Z80 processor. You may
   override this default behaviour by using the [409]-o option and specify
   your own output filename (and extension).

   You may override this default behavior by using the [410]-o option and
   specify your own output filename and extension.

   ══════════════════════════════════════════════════════════════════════════

   [411](top) [412](keywords) [413](index)

    7.3.7. The address map file extension, map

   The extension for address map files is 'map'. The base file name is taken
   from the first specified source file name at the command line (or project
   file). This file is generated by the assembler and contains a list of all
   defined address labels from all linked/relocated modules with their
   calculated (absolute) address in memory.

   ══════════════════════════════════════════════════════════════════════════

   [414](top) [415](keywords) [416](index)

    7.3.8. The definition file extension, def

   The extension for global address label definition files is 'def'. The base
   file name is taken from the first specified source file name at the
   command line (or project file). This file is generated by the assembler
   and contains a list of all globally declared address labels with their
   calculated (absolute) origin address, fetched only during assembly of
   source file modules. The format of the list contains constant definitions
   (addresses) and may be parsed e.g. as include files for other projects.

   ══════════════════════════════════════════════════════════════════════════

   [417](top) [418](keywords) [419](index)

    7.3.9. The library file extension, lib

   Library files are identified with the 'lib' extension. Library files may
   be created using the [420]-x option. Library may be included into
   application code during linking of object modules with the [421]-i option.

   ══════════════════════════════════════════════════════════════════════════

   [422](top) [423](keywords) [424](index)

8. Compiling files

   ══════════════════════════════════════════════════════════════════════════

   [425](top) [426](keywords) [427](index)

  8.1. The assembler compiling process

   The [428]Z80 Module Assembler uses a two stage compilation process; stage
   1 parses source files and generates object files. Stage 2 reads the object
   files and links the object file code, completes with address patching and
   finishes with storing the executable code.

   ══════════════════════════════════════════════════════════════════════════

   [429](top) [430](keywords) [431](index)

    8.1.1. Stage 1, parsing and code generation of all source files, object file
    generation

   A source file is being parsed for [432]Z80 mnemonics and directives. An
   object file is created to hold information of module name, local, global
   and external symbol identifiers, expressions and the intermediate code
   generation (but address and other constant information). During pass 1 all
   [433]Z80 mnemonics are parsed and code is generated appropriately. All
   expressions are evaluated; expressions that contain relocatable address
   symbols or external symbol are automatically stored into the object file.
   Expressions that didn't evaluate are preserved for pass 2. When a source
   file has been read successfully to the end, pass 2 is started. During pass
   2 all non-evaluated expressions from pass 1 are re-evaluated and stored to
   the object file if necessary. Errors are reported if symbols are still
   missing in expressions. When all expressions are evaluated and no errors
   occurred, all "touched" symbols (used in expressions) are stored into the
   object file, with scope, type and value. Then, the module name and
   generated code is stored to the object file. Various file pointers to
   sub-sections of the object file is resolved. The completion of stage 1 is
   to produce the symbol table output (either appended to listing file if
   selected or as a separate file).

   This process is performed for all specified source modules in a project.

   ══════════════════════════════════════════════════════════════════════════

   [434](top) [435](keywords) [436](index)

    8.1.2. Stage 2, linking object files and library modules, producing
    executable code

   Pass 1 of the linking loads information from each object file in the
   project; the [437]ORG address is fetched, identifiers (resolving scope,
   and absolute values) loaded, and machine code linked. During this pass all
   external library modules are fetched and linked with the object modules
   (if a library is specified from the command line). When all modules have
   been loaded, pass 2 begins. Pass 2 then reads each expression section from
   all object modules (including library modules), evaluates them and patches
   the value into the appropriate position of the linked machine code. When
   all expressions have been evaluated successfully the executable code is
   stored. If selected, the address map file is produced from the current
   symbol table resided in the data structures of the assembler's memory is
   stored to a text file.

   ══════════════════════════════════════════════════════════════════════════

   [438](top) [439](keywords) [440](index)

  8.2. File names

   Specification of file names follows the convention used on the various
   platforms that the assembler is ported to. Please read your operating
   systems manual for more information.

   ══════════════════════════════════════════════════════════════════════════

   [441](top) [442](keywords) [443](index)

  8.3. Portability of assembler file names

   If you are going to port your [444]Z80 Module Assembler files across
   several platforms a few hints may be worth considering:

   Avoid special symbols in file names like '_', '#' and '.' . They may have
   special meaning on some operating system platforms. Use only 7-bit
   standard ASCII letters in file names ('A' to 'z'). Non English language
   letters are not always allowed, and further they may not be interpreted
   correctly when ported to another platform. Avoid too long file names. Some
   operating systems have boundaries for length of filenames in a directory
   path. For example MS-DOS only allows 8 characters in a file name (followed
   by an extension). Others may have no boundaries.

   ══════════════════════════════════════════════════════════════════════════

   [445](top) [446](keywords) [447](index)

  8.4. Source file structure

   The composition of a source file module is completely free to the
   programmer. How he chooses to place the source code on a text line has no
   effect of the parsing process of the assembler. The linefeed
   interpretation is also handled by z80asm - it understands the following
   formats:

     • <LF> (used by QDOS/SMSQ/UNIX/AMIGA);
     • <CR><LF> (used by MSDOS);
     • <CR> (used by [448]Z88 /MacIntosh).

   ══════════════════════════════════════════════════════════════════════════

   [449](top) [450](keywords) [451](index)

  8.5. Using local, global and external symbols

   In larger application projects it is unavoidable to use a modular
   programming design, i.e. splitting the source into several individual
   files. This approaches the popular top - down design where you can isolate
   the problem solving into single modules. The outside world just needs to
   know where the routine is to be called by linking the modules with a few
   directives.

   In the [452]Z80 Module Assembler you only need two directives to
   accomplish just that: the [453]XREF and [454]XDEF directives.

   [455]XREF declares a symbol to be external to the current source file
   module. This tells the assembler that all expressions using that symbol is
   not to be evaluated until the compiled object modules are to linked and
   relocated together. An expression that contains this symbol is simply
   stored into the object file.

   [456]XDEF declares a symbol to be created in this module and made globally
   available to other modules during the linking/relocation phase. All
   expressions that contain a globally declared symbol is automatically
   stored into the object file.

   When a symbol is created and is neither declared external or global, it is
   implicitly defined as local to the current source module. The symbol is
   then only available to the current module during linking/relocation.

   If you want to access (external) library modules from a library, use the
   [457]LIB directive followed by the name of the routine. Several routine
   names may be specified separated by a comma.

   During the linking process all external and corresponding global symbols
   are resolved. If two identical global identifiers are loaded by the
   linking process, the most recently loaded identifier is used by the
   linker.

   ══════════════════════════════════════════════════════════════════════════

   [458](top) [459](keywords) [460](index)

  8.6. Defining symbol names

   Good programming involves a structured approach to mnemonic identification
   of names in subroutines, variables, data structures and other constants.
   The [461]Z80 Module Assembler gives you several possibilities. The easiest
   and frequently used one is [462]DEFC (Define Constant). We have supplied a
   complete set of header files (the "OZdefc.zip" file) containing the
   [463]Z88 operating system manifests as defined in the Developers' Notes V3
   (the "devnotes.zip" file) which just contains [464]DEFC directives.

   Each [465]DEFC directive is followed by an identifier name, followed by a
   = symbol and then an evaluable constant expression (usually just a
   constant). Constant definitions are usually operating system manifest or
   other frequently used items. They are put into separate source files and
   later inserted into main source files using the [466]INCLUDE directive.

   Though [467]DEFC resolves most needs, it may be necessary to define
   variable areas or templates containing names with an appropriate size tag
   (byte, word or double word). This is possible using the [468]DEFVARS
   directive. Here you may specify as many names as needed in the group.
   Then, it is easy to add, rearrange or delete any of the variable names -
   only a few modifications and then just re-compiling the necessary source
   files that use the templates. This would be a nightmare with [469]DEFC ,
   since you have to keep track of the previous and next name in the group in
   addition to count the size of all names. All this is managed by
   [470]DEFVARS automatically. Have a look at the syntax in the Directive
   Reference section.

   With advanced [471]Z80 programming you cannot avoid dynamic data
   structures like linked lists or binary trees. The fundamentals for this
   are known as records in PASCAL or structures in C. [472]DEFVARS is well
   suited for this purpose. Defining each [473]DEFVARS group with 0
   automatically generates offset variables. The last name then automatically
   defines the size of the data structure. Again, refer to the directive
   reference for a good example.

   A third possibility for an easy definition of symbols is to use the
   [474]DEFGROUP directive. Here you're able to define a set of symbols equal
   to an enumeration. It follows the same principles as for C's ENUM
   facility. The default starts at 0 and increases by 1. If you choose, a
   specific identifier may be set to a value, which then can set the next
   enumeration sequence. Again, this directive has been made to implement an
   easy way of defining symbols and providing a simple method to alter the
   identifier group. Please refer to the directive reference for an example.

   ══════════════════════════════════════════════════════════════════════════

   [475](top) [476](keywords) [477](index)

  8.7. Comments in source files

   As always, good programming requires good documentation. Without comments
   your programs lose overview and logic. Machine code is especially hard to
   follow - have you tried to look at a piece of code 2 years after
   implementation AND without any comments? HORRIBLE! There is never too many
   comments in machine code - we especially like to use high level language
   as comments - it avoids unnecessary text and logic is much more clear.

   Comments in [478]Z80 source files are possible using a semicolon. When the
   assembler meets a semicolon the rest of the current source line is ignored
   until the linefeed. Parsing will then commence from the beginning of the
   line. The semicolon may be placed anywhere in a source line. As stated you
   cannot place mnemonics after the semicolon - they will be ignored. The
   [479]Z80 parser will in many places accept comments without a semicolon
   has been set - but don't rely on it. Better use a semicolon. The context
   is much clearer. The following is an example on how to use comments in
   [480]Z80 source files:

 ; **********************
 ; main menu
 ;
 .mainmenu   call window   ; display menu
             call getkey   ; read keyboard
             ret           ; action in register A

   ══════════════════════════════════════════════════════════════════════════

   [481](top) [482](keywords) [483](index)

  8.8. Defining symbolic address labels

   The main reason for using an assembler is to be able to determine
   symbolical addresses and use them as reference in the code. These are
   defined by a name preceded with a full stop, or followed by a colon. It is
   allowed to place a mnemonic or directive after an address label. An
   address label may be left as a single statement on a line - you may of
   course use comment after the label. The following is a label definition:

 ; *****************
 ; routine definition
 .mainmenu call xxx   ; a label is preceded with '.'
 endmain:  ret                ; or followed by ':'

   It is not allowed to position two labels on the same line. However, you
   may place as many label after each other - even though no code is between
   them. They just receive the same assembler address.

   It is not allowed to specify two identical address labels in the same
   source file.

   If you want to declare an address globally accessible to other modules,
   then use [484]PUBLIC for the address label definition, otherwise the label
   definition will be interpreted as a local address label.

  [PUBLIC](#10_26)  mainmenu
 ...
 .mainmenu ; label accessible from other modules with  [EXTERN](#10_12)

   You may use before or after the label - z80asm automatically handles the
   scope resolution as long as you use [485]PUBLIC to define it as globally
   accessible.

   ══════════════════════════════════════════════════════════════════════════

   [486](top) [487](keywords) [488](index)

  8.9. Writing Z80 mnemonic instructions

   All [489]Z80 instructions may be written in mixed case, lower or upper
   case - you decide! How you separate opcode words, register names and
   operands is your choice. Only a few rules must be obeyed:

    1. Each instruction mnemonic must be completed on a single line.
    2. The instruction identifier must be a word, i.e. don't use space
       between [490]CALL .
    3. Register identifiers must be a word, ie. HL not H L.

   A few examples which all are legal syntax:

 Ld HL   , 0       ; comment
 ld       hl, $fFFF;comment
 caLL ttttt

   ══════════════════════════════════════════════════════════════════════════

   [491](top) [492](keywords) [493](index)

  8.10. Optional Z80 mnemonic instruction syntax

   The instructions below allow additional specification of the accumulator
   register. Zilog standard convention is to only specify the source operand.
   Sometimes it is better to specify the accumulator to make the instruction
   look more clear, and to avoid confusion. After all, they specified it for
   "add", "adc" and "sbc".

 sub a,r
 sub a,n
 sub a,(hl)
 sub a,(ix+0)
 sub a,(iy+0)

   this syntax applies also to "and", "or", "xor" & "cp"

   ══════════════════════════════════════════════════════════════════════════

   [494](top) [495](keywords) [496](index)

  8.11. The undocumented Z80 instructions

   We have included the parsing and code generation of the undocumented
   [497]Z80 instructions. They are as follows:

 LD   r,IXL  ; r = A,B,C,D,E,IXL,IXH
 LD   r,IXH
 LD   IXL,n  ; n = 8-bit operand
 LD   IXH,n

 ADC  A,IXL
 ADC  A,IXH
 ADD, AND, CP, DEC, INC, OR, SBC, SUB, XOR ...

 SLL  r   ; r = A,B,C,D,E,H,L
 SLL  (HL)
 SLL  (IX+d)
 SLL  (IY+d)

   SLL (Shift Logical Left)

   SLL does shift leftwards but insert a '1' in bit 0 instead of a '0'.

   Except for the SLL instruction all have bugs related to an interrupt being
   able to occur while the instructions are decoded by the processor. They
   are implemented on the chip, but are reported to be unreliable. We have
   used some of them in our debugger software for the [498]Z88 . Until now
   the code has been running successfully on all our [499]Z88 computers.

   ══════════════════════════════════════════════════════════════════════════

   [500](top) [501](keywords) [502](index)

  8.12. Referencing library routines

   When you need to use a library routine in your application code, you need
   to do two things; include a library file at the assembler command line
   with the [503]-i option and refer to the library routine in your source
   file using the [504]LIB directive followed by the name of the library
   routine, e.g.

  [LIB](#10_20)  malloc, free

   which will declare the two names "malloc" and "free" as external
   identifiers to the current source file module. Please note that you can
   declare the names before or after they actually are referred in your
   program source,. Failing to use the [505]LIB directive will interpret
   labels as local symbols to that source file module. When the parser meets
   the instruction that uses one of the above names in a parameter, the
   parameter "expression" is automatically saved to the object file for later
   processing.

   During the linking phase of all the object files the specified library
   file is automatically scanned for "malloc" and "free" and included into
   the application code when found.

   Much application programming can be saved in "re-inventing the wheel" if
   you store frequently used standard routines in libraries. We have supplied
   a comprehensive set of library routines that were created along the
   development of the Assembler Workbench application EPROM. Use them as
   appropriate and add new ones. We are interested in your work - if you feel
   that you have made some good routines that others may benefit from, e-mail
   them to us and we will include them into the standard library.

   ══════════════════════════════════════════════════════════════════════════

   [506](top) [507](keywords) [508](index)

  8.13. Creating/updating libraries

   Creating libraries is an inbuilt feature of the assembler. The following
   steps are necessary to create a library:

    1. Define a project file containing all filenames (without extensions) in
       your directory that contains all library routines (the easiest method
       since you later can move all files to another directory).

    2. Each library source module uses the [509]XLIB directive to define the
       name of the routine. The same name must be used for the address label
       definition. If your library uses other library routines then declare
       them with the [510]LIB directive. Please note that a library routine
       creates the module name itself (performed by [511]XLIB automatically).
       The module name is used to search for routines in a library.

    3. The command line contains the [512]-x option immediately followed by
       your filename. Then you need to specify your project filename preceded
       by '@'.

   For example:

 z80asm -xiofunctions @iofunctions

   will create a library "iofunctions.lib" in the current directory (also
   containing all library source files). The project file is "iofunctions"
   also in the current directory.

   Please note that no binary file is created (a library is NOT an executable
   file), but a collection of object files sequentially organized in a file.

   ══════════════════════════════════════════════════════════════════════════

   [513](top) [514](keywords) [515](index)

  8.14. Referencing routines in other compiled projects

   It may be necessary in some situations to get access to routines
   previously compiled in another project. This implies however a knowledge
   of their absolute addresses during linking. This information is stored in
   the map file, but not accessible in a form suitable to be parsed by the
   assembler. However, this is possible in using the [516]-g option at the
   assembler command line. The action performed creates a [517]DEFC list file
   of address labels that have been declared as globally available (using the
   [518]XDEF directive). Only compiled source files are included in the list.
   If you were using the [519]-a option (compile only updated source files)
   and no files were updated then the [520]-g file would be empty. If you
   would like a complete list of all global routines then it is needed to
   compile the whole project (using the [521]-b command line option).

   When the file is generated, it can easily be [522]INCLUDE 'd in another
   project where your routines may access the external routines. You might do
   this in two ways:

    1. Including the file in every source module that needs to access
       external routines. This may be the easiest solution if you're only
       going to need external access in one or two source modules. With many
       external calls in different module of the current project it requires
       much altering of files.

    2. Creating a new source file that is part of your project. This file
       could easily be the first file in your project but could just as well
       be placed anywhere in your project. Declare each external name that is
       needed somewhere in your project as [523]XDEF , meaning that all names
       to be included are globally accessible from this module. Then specify
       the [524]INCLUDE of the [525]DEFC list of the other project file. As
       the names get loaded, they become global definitions. All other
       definitions will be ignored and not stored to the object file (they
       are not referred in the source module). All other modules just need to
       specify the external names as [526]XREF . During linking they all get
       resolved and your code has access to external routines from a
       previously compiled project.

   Whenever the previous project has been re-compiled (and issued with
   [527]-g option) there is a possibility that routine addresses has changed.
   You therefore need to recompile the extra source module in your project to
   get the new identifier values - the rest of your compilation is unaffected
   (due to the [528]XREF directives). Only the linking process gets the new
   proper addresses. In example 1) you had to recompile all source files that
   would have used an [529]INCLUDE of the [530]DEFC list file. In example 2)
   only one file had to be recompiled.

   The principle of external addresses was used to compile the debugger
   version to be resided in segment 0 (into the upper 8K). The actual size of
   the debugger code uses 16K, but was split into two separate halves to fit
   into the upper 8K of segment 0. Each of the 8K code-segments had to get
   access to the other 8K block. The solution was the [531]-g option and
   cross referencing using [532]XREF and an additional source module
   (containing the [533]XDEF declarations) that included the [534]-g list
   file of the other project compilation.

   ══════════════════════════════════════════════════════════════════════════

   [535](top) [536](keywords) [537](index)

9. Using expressions

   Expressions are almost unavoidable in source files. They define and
   explain things much clearer than just using a constant. The [538]Z80
   Module Assembler allows expressions wherever a parameter is needed. This
   applies to [539]Z80 mnemonic instructions, directives and even in
   character strings. The resulting value from an evaluated expression is
   always an integer. All expressions are calculated internally as 32-bit
   signed integers. However, the parameter type defines the true range of the
   expression. E.g. you cannot store a 32-bit signed integer at an 8-bit LD
   instruction like LD A, <n> . If a parameter is outside an allowed integer
   range an assembly error is reported. Finally, no floating point operations
   are needed by the assembler. There is no real standard on [540]Z80 based
   computers.

   Whenever an integer is stored in a [541]Z80 file, the standard Zilog
   notation is used, i.e. storing the integer in low byte, high byte order
   (this also applies to 32-bit integers). This standard is also known as
   little endian notation (also used by INTEL processors).

   Expressions may be formed as arithmetic and relational expressions.
   Several components are supported: symbol names (identifiers), constants,
   ASCII characters and various arithmetic operators.

   ══════════════════════════════════════════════════════════════════════════

   [542](top) [543](keywords) [544](index)

  9.1. Constant identifiers

   Apart from specifying decimal integer numbers, you are allowed to use
   hexadecimal constants, binary constants and ASCII characters. The
   following symbols are put in front of the constant to identify the type:

 $ : hexadecimal constant, e.g. $4000 (16384).
 @ : binary constant, e.g. @11000000 (192).
 ' ' : ASCII character, e.g. 'a'.

   ══════════════════════════════════════════════════════════════════════════

   [545](top) [546](keywords) [547](index)

  9.2. Arithmetic operators

   All basic arithmetic operators are supported: addition, subtraction,
   multiplication, division and modulus. In addition binary logical operators
   are implemented: binary AND, OR and XOR.

 + : addition, e.g. 12+13
 - : unary minus, subtraction. e.g. -10, 12-45
 * : multiplication, e.g. 45*2 (90)
 / : division, e.g. 256/8 (32)
 % : modulus, e.g. 256%8 (0)
 ** : power, e.g. 2**7 (128)
 & : binary AND, e.g. 255 & 7 (7)
 | : binary OR, e.g. 128 | 64 (192)
 ^ : binary XOR, e.g. 128 ^ 128 (0)
 ~ : binary NOT, e.g. (~0xAA) & 0xFF (0x55)

   Arithmetic operators use the standard operator precedence, shown from
   highest to lowest:

 constant identifiers
 () ** */% +-&|^~

   If you want to override the default operator precedence rules, use
   brackets ().

   ══════════════════════════════════════════════════════════════════════════

   [548](top) [549](keywords) [550](index)

  9.3. Relational operators

   With relational operators you may form logical expressions resulting in
   true or false conditions. The resulting value of a true expression is 1.
   The resulting value of a false expression is 0. These operators are quite
   handy when you need to perform complex logic for conditional assembly in
   [551]IF -ELSE-ENDIF statements. The following relational operators are
   available:

 = : equal to
 <> :not equal to
 < : less than
 > : larger than
 <= : less than or equal to
 >= : larger than or equal to
 ! : not

   You may link several relational expressions with the binary operators AND,
   OR and XOR. You have all the possibilities available!

   It is perfectly legal to use relational expressions in parameters
   requiring an arithmetic value. For example:

 LD A, (USING_IBM = 1) | RTMFLAGS

   ══════════════════════════════════════════════════════════════════════════

   [552](top) [553](keywords) [554](index)

  9.4. The ASMPC standard function

   In occasional circumstances it may be necessary to use the current
   location of the assembler program counter in an expression e.g.
   calculating a relative distance. This may be done with the help of the
   ASMPC identifier. An example:

 .errmsg0  [DEFB](#10_3)  errmsg1 - ASMPC - 1 , "File open error"
 .errmsg1  [DEFB](#10_3)  errmsg2 - ASMPC - 1 , "Syntax error"
 .errmsg2

   Here, a length byte of the following string (excluding the length byte) is
   calculated by using the current ASMPC address value.

   ══════════════════════════════════════════════════════════════════════════

   [555](top) [556](keywords) [557](index)

  9.5. Symbol identifiers in expressions

   Apart from using integer constants in your expressions, names are allowed
   as well. This is frequently used for symbolical address label references
   (both external and local).

   Forward referencing of symbols is not really something that is important
   in evaluating expressions. The logic is built into the assembler parser.
   If an expression cannot be resolved in pass 1 of source file parsing, it
   will try to re-evaluate the failed expression in pass 2 of the parsing. If
   it still fails a symbol has not been found ( [558]XREF and [559]LIB
   external symbols are handled during the linking phase).

   ══════════════════════════════════════════════════════════════════════════

   [560](top) [561](keywords) [562](index)

10. Directive reference

   The [563]Z80 Module Assembler directives are used to manipulate the
   [564]Z80 assembler mnemonics and to generate data structures, variables
   and constants. You are even permitted to include binary files while code
   generation is performed.

   As the name imply they direct the assembler to perform other tasks than
   just parsing and compiling [565]Z80 instruction mnemonics. All directives
   are treated as mnemonics by the assembler, i.e. it is necessary that they
   appear as the first command identifier on the source line (NOT necessarily
   the first character). Only one directive is allowed at a single source
   line. Even though they are written as CAPITALS in this documentation they
   may be written in mixed case letters in your source files.

   Since the directives cover very different topics of assembler processing,
   each directive will be explained in detail, identified with a header
   description for each text section. The following syntax is used:

 <> : defines an entity, i.e. a number, character or string.
 {} : defines a an optional repetition of an entity.
 [] : defines an option that may be left out.

   ══════════════════════════════════════════════════════════════════════════

   [566](top) [567](keywords) [568](index)

  10.1. BINARY "filename"

   [569]BINARY loads a binary file at the current location. This could for
   example be a static data structure or an executable machine code routine.
   The loaded binary file information is included into the object file code
   section. The assembler PC is updated to the end of the loaded binary code.

   ══════════════════════════════════════════════════════════════════════════

   [570](top) [571](keywords) [572](index)

  10.2. CALL_OZ <expression>

   The <expression> may be a 16-bit expression and must evaluate to a
   constant. This is an easy interface call to the [573]Z88 operating system.
   This is an advanced RST 20H instruction which automatically allocates
   space for the size of the specified parameter (either 8-bit or 16-bit).
   Code is internally generated as follows:

 RST $20
  [DEFB](#10_3)  x ; 8-bit parameter

   or

 RST $20
  [DEFW](#10_4)  x ; 16-bit parameter

   ══════════════════════════════════════════════════════════════════════════

   [574](top) [575](keywords) [576](index)

  10.3. DEFB <8-bit expr>,{<8-bit expr>} (-128; 255)

   Stores a sequence of bytes (8-bits) at the current location. Expressions
   may be used to calculate the values.

   ══════════════════════════════════════════════════════════════════════════

   [577](top) [578](keywords) [579](index)

  10.4. DEFW <16-bit expr>,{<16-bit expr>} (-32768; 65535)

   Stores a sequence of words (16-bits) in low byte - high byte order (little
   endian) at the current location. Expressions may be used to calculate the
   values.

   ══════════════════════════════════════════════════════════════════════════

   [580](top) [581](keywords) [582](index)

  10.5. DEFL <32-bit expr>,{<32-bit expr>} (-2147483647; 4294967295)

   Stores a sequence of double-words (32-bits) in low byte - high byte order
   (little endian) at the current location. Expressions may be used to
   calculate the values.

   ══════════════════════════════════════════════════════════════════════════

   [583](top) [584](keywords) [585](index)

  10.6. DEFC name=<32-bit expression>{, name=<32-bit expression>}

   Define a symbol variable, that may either be a constant or an expression
   evaluated at link time. The allowed range is a signed 32-bit integer
   value. All standard [586]Z88 operating system header files use [587]DEFC

   ══════════════════════════════════════════════════════════════════════════

   [588](top) [589](keywords) [590](index)

  10.7. DEFM <string expression>|<8-bit expr>,...

   [591]DEFM stores a string constant at the current location. Strings are
   enclosed in double quotes, e.g. "abcdefgh". Strings may be concatenated
   with byte constants using commas. This is useful if control characters
   need to be a part of the string and cannot be typed from the keyboard.
   Several strings and byte expressions may be concatenated, e.g.

  [DEFM](#10_7)  "string_a" , "string_b" , 'X' , CR , LF , 0

   ══════════════════════════════════════════════════════════════════════════

   [592](top) [593](keywords) [594](index)

  10.8. DEFGROUP '{' name {',' name ['=' <8-bit expression>]} '}'

   [595]DEFGROUP defines a group of identifier symbols with implicit values.
   This is similar to the enumeration principles used in C and PASCAL. The
   initial symbol value is 0, increased by 1 for each new symbol in the list.
   You may include a <name = expression> which breaks the linear enumeration
   from that constant. The [596]DEFGROUP directive may be spanned across
   several lines and MUST be enclosed with { and }. [597]DEFGROUP is just a
   more easy way than: [598]DEFC name0 = 0, name1 = name0, ...

   The following example illustrates a useful example of defining symbol
   values:

  [DEFGROUP](#10_8)
 {
    sym_null
    sym_ten = 10, sym_eleven, sym_twelve
 }

   ══════════════════════════════════════════════════════════════════════════

   [599](top) [600](keywords) [601](index)

  10.9. DEFINE name,{name}

   Defines a symbol identifier as logically true (integer <> 0). The symbol
   will be created as a local variable and disappears when assembly is
   finished on the current source file module.

   ══════════════════════════════════════════════════════════════════════════

   [602](top) [603](keywords) [604](index)

  10.10. DEFS <size>{, <fill-byte>}

   [605]DEFS allocates a storage area of the given size with the given
   fill-byte. The fill-byte defaults to zero if not supplied. Both
   expressions need to be constants.

   ══════════════════════════════════════════════════════════════════════════

   [606](top) [607](keywords) [608](index)

  10.11. DEFVARS <16-bit expression> '{' [<name>] [<storage_size>
  <size_multiplier>] '}'

   [609]DEFVARS defines variable address area or offsets. First you define
   the origin of a variable area. This may be defined using an evaluable
   16-bit positive expression. Each variable name is followed by a size
   specifier which can be 'ds.b' (byte), 'ds.w' (word), 'ds.p' (3-byte
   pointer) or 'ds.l' (double-word). This is particularly useful for defining
   dynamic data structures in linked lists and binary search trees. Defining
   variable areas are only template definitions not allocations. An example:

  [DEFVARS](#10_11)   [Z80](#7) asm_vars
 {
    RuntimeFlags1 ds.b 1     ; reserve 1 byte
    RuntimeFlags2 ds.b 1
    RuntimeFlags3 ds.b 1
                  ds.w 1     ; space not named
    explicitORIG  ds.w 1     ; reserve 2 bytes
    asmtime       ds.b 3     ; reserve 3 bytes
    datestamp_src ds.b 6     ; reserve 6 bytes
    datestamp_obj ds.b 6
    TOTALERRORS   ds.l 1     ; reserve 4 bytes
 }

   the following is useful for defining dynamic data structures:

  [DEFVARS](#10_11)  0                    ; 'PfixStack' structure
 {
    pfixstack_const     ds.l 1    ; stack item value
    pfixstack_previtem  ds.p 1    ; pointer to previous
    SIZEOF_pfixstack              ; size of structure
 }

   This type of variable declaration makes it very easy for modifications,
   e.g. deleting or inserting variable definitions.

   A special logic is available too which can be used throughout individual
   source files during compilation. If you specify -1 as the starting
   address, the last offset from the previous [610]DEFVARS which was not
   specified as 0 will be used.

   This enables you to gradually build up a list of identifier name offsets
   across [611]DEFVARS areas in different source files. The following example
   explains everything:

 defvars $4000
 {
    aaa ds.b 1
    bbb ds.b 100
 }
 defvars -1
 {
    ccc ds.b 100
    ddd ds.b 1
    eee ds.b 10
 }
 defvars 0
 {
    fff ds.p 1
    ggg ds.b 1
    hhh ds.w 1
    iii ds.p 1
 }
 defvars -1
 {
    jjj ds.b 100

 }

   Some of the symbols will look like this:

 BBB = $4001
 CCC = $4065
 GGG = $0003
 JJJ = $40D4

   ══════════════════════════════════════════════════════════════════════════

   [612](top) [613](keywords) [614](index)

  10.12. EXTERN name {, name}

   This declares symbols as external to the current module. Such a symbol
   must have been defined as [615]PUBLIC in another module for the current
   module to be able to use the symbol (it will be linked during the linking
   phase).

   ══════════════════════════════════════════════════════════════════════════

   [616](top) [617](keywords) [618](index)

  10.13. FPP <8-bit expression>

   Interface call to the [619]Z88 operating systems' floating point library.
   This is easier than writing:

 RST $18
  [DEFB](#10_3)  mnemonic

   This is an advanced RST 18H instruction which automatically allocates
   space for the specified parameter. All [620]Z88 floating point call
   mnemonics are defined in the "fpp.def" file.

   ══════════════════════════════════════════════════════════════════════════

   [621](top) [622](keywords) [623](index)

  10.14. GLOBAL name {, name}

   The [624]GLOBAL directive defines a symbol [625]PUBLIC if it has been
   defined locally or [626]EXTERN otherwise.

   ══════════════════════════════════════════════════════════════════════════

   [627](top) [628](keywords) [629](index)

  10.15. IF <logical expression> ... [ELSE] ... ENDIF

   This structure evaluates the logical expression as a constant, and
   compiles the lines up to the ELSE clause if the expression is true (i.e.
   not zero), or the lines from ELSE to ENDIF if is is false (i.e. zero). The
   ELSE clause is optional. This structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [630](top) [631](keywords) [632](index)

  10.16. IFDEF <name> ... [ELSE] ... ENDIF

   This structure checks if the give symbol name is defined, and compiles the
   lines up to the ELSE clause if true (i.e. defined), or the lines from ELSE
   to ENDIF if false (i.e. not defined). The ELSE clause is optional. This
   structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [633](top) [634](keywords) [635](index)

  10.17. IFNDEF <name> ... [ELSE] ... ENDIF

   This structure checks if the give symbol name is not defined, and compiles
   the lines up to the ELSE clause if true (i.e. not defined), or the lines
   from ELSE to ENDIF if false (i.e. defined). The ELSE clause is optional.
   This structure may be nested.

   ══════════════════════════════════════════════════════════════════════════

   [636](top) [637](keywords) [638](index)

  10.18. INCLUDE "filename"

   Another component that is frequently used is to 'link' an additional
   source file together with the current source file. Usually this contains
   variable definitions that are commonly used by several modules in a
   project. This makes sense since there is no idea in copying the same
   information into several files - it simply uses redundant space of your
   storage media. This is certainly important on the [639]Z88 which not
   always has huge amounts of installed user/system RAM (usually 128K). The
   external source file will be included at the position of the [640]INCLUDE
   directive.

   The format of the filename depends on the operating system platform. As
   with the current source file, you may also insert files in include files.
   There is no limit of how many levels (of files) you specify of include
   files. Recursive or mutually recursive [641]INCLUDE files (an [642]INCLUDE
   file calling itself) is not possible - the assembler program will
   immediately return an error message back to you!

   Include files are usually put at the start of the source file module but
   may be placed anywhere in the source text. The current source file will be
   continued after the [643]INCLUDE directive when the included file has been
   parsed to the end of file.

   ══════════════════════════════════════════════════════════════════════════

   [644](top) [645](keywords) [646](index)

  10.19. INVOKE <16-bit expression>

   Special [647]CALL instruction for the Ti83 calculator; it is coded as a
   RST 28H followed by the 16-bit expression, if the [648]-plus option is
   passed on the command line (for the Ti83Plus), or as a normal [649]CALL
   instruction if the option is not passed.

   ══════════════════════════════════════════════════════════════════════════

   [650](top) [651](keywords) [652](index)

  10.20. LIB name {,name}

   This directive is obsolete. It has been replaced by the [653]EXTERN
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [654](top) [655](keywords) [656](index)

  10.21. LINE <32-bit expr> [ , "file-name" ]

   Used when the assembler is used as the back-end of a compiler to
   synchronize the line numbers in error messages to the lines from the
   compiled source.

   ══════════════════════════════════════════════════════════════════════════

   [657](top) [658](keywords) [659](index)

  10.22. LSTOFF

   Switches listing output to file off temporarily. The listing file is not
   closed.

   ══════════════════════════════════════════════════════════════════════════

   [660](top) [661](keywords) [662](index)

  10.23. LSTON

   Enables listing output (usually from a previous [663]LSTOFF ). Both
   directives may be useful when information from [664]INCLUDE files is
   redundant in the listing file, e.g. operating system definitions.

   ══════════════════════════════════════════════════════════════════════════

   [665](top) [666](keywords) [667](index)

  10.24. MODULE name

   This defines the name of the current module. This may be defined only once
   for a module. All source file modules contain a module name. This name is
   used by the assembler when creating address map files and for searching
   routines in libraries. Further, it allows the programmer to choose a
   well-defined name for the source file module. The position of the module
   name is of no importance; it may be placed at the end or the start of the
   source file. However, it has more sense to put it at the top. The syntax
   is simple - specify a legal identifier name after the [668]MODULE
   directive, e.g. [669]MODULE main_module

   ══════════════════════════════════════════════════════════════════════════

   [670](top) [671](keywords) [672](index)

  10.25. ORG <16-bit expression>

   Define address origin of compiled machine code - the position in memory
   where the machine is to be loaded and executed. The expression must be
   evaluable (containing no forward or external references). All address
   references will be calculated from the defined [673]ORG value. The
   [674]ORG address will be placed in the current module that is being
   compiled. However, during linking only the first object module is being
   read for an [675]ORG address. The [676]ORG is ignored during linking if
   you have specified an [677]-r option on the command line.

   When assembling programs with multiple sections, a section without an
   [678]ORG will be appended to the end of the previous section. A section
   with a defined [679]ORG will generate its own binary file, e.g.
   file_CODE.asm.

   A section may contain [680]ORG -1 to tell the linker to split the binary
   file of this section, but continue the addresses sequence from the
   previous section.

   ══════════════════════════════════════════════════════════════════════════

   [681](top) [682](keywords) [683](index)

  10.26. PUBLIC name {, name}

   This directive declares symbols publicly available for other modules
   during the linking phase of the compilation process.

   ══════════════════════════════════════════════════════════════════════════

   [684](top) [685](keywords) [686](index)

  10.27. XDEF name {, name}

   This directive is obsolete. It has been replaced by the [687]PUBLIC
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [688](top) [689](keywords) [690](index)

  10.28. XLIB name

   This directive is obsolete. It has been replaced by the [691]PUBLIC
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [692](top) [693](keywords) [694](index)

  10.29. XREF name {, name}

   This directive is obsolete. It has been replaced by the [695]EXTERN
   directive (See changelog.txt at the root of the z88dk project).

   ══════════════════════════════════════════════════════════════════════════

   [696](top) [697](keywords) [698](index)

11. Run time error messages

   The following error messages will be written toe the error files
   corresponding to each source file, and also to stderr. Each error message
   will contain the name of the source file and a line number where the error
   occurred in the file.

     • "File open/read error"
       You have tried to access a file that either was not found, already
       opened by other resources, or the assembler wasn't able to create
       output files (object file, listing-, symbol-, map- or executable
       binary file).

     • "Syntax error"
       This is a message used by many routines - hence the general but
       descriptive message. You have tried to use illegal registers in
       [699]Z80 mnemonic instructions, specified an illegal parameter type
       (string instead of integer), omitted a parameter ( [700]DEFB without
       constant).

     • "Symbol not defined"
       This error is given if you are referring to an identifier (usually in
       an address reference) that was not declared. Either a label definition
       is missing in the current module or you have forgotten to declare an
       identifier as external using the [701]XREF directive.

     • "Not enough memory" / "No room in [702]Z88 "
       Well, well. It seems that there wasn't enough room to hold the
       internal data structures during parsing or linking your code. Delete
       any unnecessary running applications/jobs then try again. If you got
       the message on the [703]Z88 , try also to delete unnecessary files
       from the filing system of your current RAM card.

     • "Integer out of range"
       You have an expression which evaluates into a constant that are beyond
       the legal integer range (e.g. trying to store a 16-bit value into an
       8-bit parameter).

     • "Syntax error in expression"
       Quite clearly you have made an illegal expression, e.g. specifying two
       following operands without an operator to separate them, used an
       illegal constant specifier or using illegal characters that aren't a
       legal identifier.

     • "Right bracket missing"
       Your expression is using brackets and is not properly balanced, i.e.
       too many beginning brackets or too few ending brackets.

     • "Source filename missing"
       There has not been specified any source file modules or project file
       to start a compilation.

     • "Illegal option"
       The command line parser couldn't recognise the -option. Remember to
       specify your option in EXACT case size. You have probably used a space
       between an option and a filename parameter.

     • "Unknown identifier"
       The parser expected a legal identifier, i.e. a directive or [704]Z80
       mnemonic. You have probably omitted the '.' in front of a label
       definition, misspelled a name or used a comment without a leading ';'.

     • "Illegal identifier"
       You have been trying to use a name that is either not known to the
       parser or an illegal identifier. This might happen if you try to use a
       register that is not allowed in a LD instruction, e.g. LD A,F .

     • "Max. code size reached"
       Is that really possible? Very interesting code of yours! [705]Z80
       machine code program tend to be in the 32K range (at least on the
       [706]Z88 )... Well, the [707]Z80 processor cannot address more than
       64K. Start changing your code to a smaller size!

     • "errors occurred during assembly"
       Status error message displayed on the screen when the assembler has
       completed its parsing on all modules. You have one or more errors to
       correct in your source files before the assembler continues with
       linking the next time.

     • "Symbol already defined"
       In the current source file, you have tried to create two identical
       address label definitions, or other name identifier creators (using
       [708]DEFC , [709]DEFVARS , [710]DEFGROUP ).

     • "Module name already defined"
       You have used the [711]MODULE directive more than once in your source
       file, or used both a [712]MODULE and [713]XLIB directive (library
       modules only need an [714]XLIB ).

     • "Symbol already declared local"
       You have tried to declare a symbol as [715]XREF , but it was already
       defined local, eg. using a ".lbaddr" in your source.

     • "Illegal source filename"
       You have tried to specify an option after having begun to specify
       filenames. Options must always be specified before filenames or
       project files.

     • "Symbol declared global in another module"
       You have two identical [716]XDEF definitions in separate modules. One
       of them should probably be an [717]XREF instead.

     • "Re-declaration not allowed"
       You are trying to specify an [718]XDEF for a name that has already
       been [719]XREF 'ed in the same module (or the other way around).

     • " [720]ORG already defined"
       Only one [721]ORG statement is allowed per section.

     • "Relative jump address must be local"
       You have tried to JR to a label address that is declared as external
       (with [722]XREF or [723]LIB ). JR must be performed in the current
       source file module.

     • "Not a relocatable file" / "Not an object file"
       The assembler opened a supposed object file (with the proper ".obj"
       extension) but realised it wasn't conforming to the [724]Z80 assembler
       standard object file format.

     • "Couldn't open library file"
       The library file was found but couldn't be opened (probably already
       opened by another application resource)

     • "Not a library file"
       Your library file is not a library file (at least is not of the
       correct file format used by this assembler). Have you maybe used
       another "library" file? The [725]Z80 library file could also be
       corrupted (at least in the header).

     • "Cannot include file recursively"
       A file was tried to be included which was already included at a
       previous include level. [726]INCLUDE "a.h" cannot contain an
       [727]INCLUDE "a.h".

   ══════════════════════════════════════════════════════════════════════════

   [728](top) [729](keywords) [730](index)

12. Backlog

     • Doing

          • Implement -E to generate pre-processed output in a .i file

     • Preprocessor

          • Parse TASM input
          • Parse Z80MR input
          • high level structures
          • macros
          • architecture-specific macro-like opcodes
          • architecture-specific character encoding
          • JR to JP optimization for speed
          • preprocessor
          • separate scanner from preprocessor

     • Assembler

          • JP to JR optimization for size
          • compile expressions
          • object files store list of input files and command line so that
            [731]-d can decide if it is necessary to recompile
          • object files can store same code for multiple architectures
          • recursive parsing of @lists
          • parse expressions

     • Linker

          • section groups
          • overlays
          • absolute memory areas with holes

     • Librarian

          • object files and library files have an index of all defined
            symbols

     • Unsorted Backlog

          • compute compile-time constants
          • execute compile-time [732]IF /ELSE/ENDIF
          • do not process preprocessor directives in the false branch of
            [733]IF
            fails building z88dk because [734]INCLUDE of unexistent file
            guarded by [735]IF FALSE is processed and assembly fails
          • process C_LINE
          • fix list files when parsing a .i
          • move all directives from z80asm to z80asm2
          • handle [736]-m for architecture specific code
          • handle [737]-D and -U for top-level defines
          • process [738]INCLUDE / INCBIN / [739]BINARY
          • generate .i file
          • indicate syntax error location
          • process labels
          • process [740]INCLUDE
          • process [741]BINARY /INCBIN
          • bug rst label
          • Implement recursive includes in Coco/R parser/scanner
          • Separate standard [742]Z80 assembly from extensions; add macro
            files for extensions.
          • Port to C++
          • Parse command line
          • Input source
          • Preprocess
          • Lexing
          • Parsing
          • Symbol Table
          • Object Files
          • Assembling
          • Linking
          • List file
          • allow EQU as synonym to [743]DEFC
          • finish the split between front-end and back-end;
          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;
          • add an additional step to automatically change JR into JP if the
            distance is too far;
          • implement macros inside the assembler
          • add high level constructs ( [744]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)
          • add a rule based optimizer based on RAGEL as a state machine
            generator
          • --icase option
          • --c-strings or --asm-strings
          • architectire-dependent character mapping
          • Test: jr: jr jr
          • Need option to debug pre-processing and macro expansion - -E
          • Add one opcode
          • Separate standard [745]Z80 assembly from extensions; add macro
            files for extensions
          • Preprocess
          • Parsing
          • Symbol Table
          • Object Files
          • Assembling
          • Linking
          • List file
          • allow EQU as synonym to [746]DEFC
          • finish the split between front-end and back-end;
          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;
          • add an additional step to automatically change JR into JP if the
            distance is too far;
          • cleanup the symbol table to implement the [747]GLOBAL suggestion:
            declare a symbol [748]GLOBAL and it is [749]PUBLIC if defined, or
            [750]EXTERN otherwise
          • implement macros inside the assembler
          • add high level constructs ( [751]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)
          • add a rule based optimizer based on RAGEL as a state machine
            generator
          • BUG_0038: library modules not loaded in sequence: The library
            modules loaded to the linked binary file should respect the order
            given on the command line.
          • generate .err files with errors
          • show source line and syntax error location
          • section name: introduces a new section at the end of the current
            list
          • section name before name: introduces a new section before the
            given section
          • section name after name: introduces a new section after the given
            name
          • org:

         1. Any section with an [752]ORG address starts a new area of code
            and generates a new binary output file, named
            <first_module_name>_<section_name>.bin
         2. Any section that has no [753]ORG address gets packed at the end
            of the previous section.

          • The null section is only special in the sense that the code is
            output to <first_module_name>.bin, and that it's [754]ORG address
            can be defined in the command line via -rhhhh.

          • simplify expressions to tranform LABEL1-LABEL2 into a constant

          • --icase option

          • --c-strings or --asm-strings

          • architecture-dependent character mapping

          • Test: jr: jr jr

          • Need option to debug pre-processing and macro expansion - -E

          • Add one opcode

          • Separate standard [755]Z80 assembly from extensions; add macro
            files for extensions

          • Preprocess

          • Parsing

          • Symbol Table

          • Object Files

          • Assembling

          • Linking

          • List file

          • allow EQU as synonym to [756]DEFC

          • finish the split between front-end and back-end;

          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;

          • add an additional step to automatically change JR into JP if the
            distance is too far;

          • cleanup the symbol table to implement the [757]GLOBAL suggestion:
            declare a symbol [758]GLOBAL and it is [759]PUBLIC if defined, or
            [760]EXTERN otherwise

          • implement macros inside the assembler

          • add high level constructs ( [761]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)

          • add a rule based optimizer based on RAGEL as a state machine
            generator

          • BUG_0038: library modules not loaded in sequence: The library
            modules loaded to the linked binary file should respect the order
            given on the command line.

          • generate .err files with errors

          • show source line and syntax error location

          • Manage libraries

          • Link object files and libraries

          • Split object files in modules, link each module separately

          • :: to define public symbol

          • to declare external symbol

          • #include

          • #define

          • #macro

          • Implement recursive includes in Coco/R parser/scanner

          • Separate standard [762]Z80 assembly from extensions; add macro
            files for extensions.

          • Port to C++

          • Parse command line

          • Input source

          • Preprocess

          • Lexing

          • Parsing

          • Symbol Table

          • Object Files

          • Assembling

          • Linking

          • List file

          • allow EQU as synonym to [763]DEFC

          • finish the split between front-end and back-end;

          • implement an expression parser with a parser generator, to get
            rid of the need to write a '#' to tell the assembler something it
            should know: a difference between two addresses is a constant;

          • add an additional step to automatically change JR into JP if the
            distance is too far;

          • implement macros inside the assembler

          • add high level constructs ( [764]IF flag / ELSE / ENDIF, DO WHILE
            flag, ...)

          • add a rule based optimizer based on RAGEL as a state machine
            generator

          • Errors are only output on stderr, *.err files are not created.
            *.err files are a leftover from operating systems that could not
            redirect standard error.

            Fatal errors example:
            x.cc:1:18: fatal error: nofile: No such file or directory
            #include "nofile"
            ------------------^
            compilation terminated.

            Non-fatal errors example:
            x.cc:1:7: error: expected initializer before 'b'
            int a b
            -------^

          • Simplify generation of cpu test files, remove z80pack

   ══════════════════════════════════════════════════════════════════════════

   [765](top) [766](keywords) [767](index)

13. References

     • [768]The Telemark Assembler

   ══════════════════════════════════════════════════════════════════════════

   [769](top) [770](keywords) [771](index)

14. Copyright

   The original z80asm module assembler was written by Gunther Strube. It was
   converted from QL SuperBASIC version 0.956, initially ported to Lattice C,
   and then to C68 on QDOS.

   It has been maintained since 2011 by Paulo Custodio.

   Copyright (C) Gunther Strube, InterLogic 1993-99
   Copyright (C) Paulo Custodio, 2011-2020

   ══════════════════════════════════════════════════════════════════════════

   [772](top) [773](keywords) [774](index)

15. License

   Artistic License 2.0
   ([775]http://www.perlfoundation.org/artisticlicense2_0)

   ══════════════════════════════════════════════════════════════════════════

   [776](top) [777](keywords) [778](index)

16. Keywords

   [779]-C [780]-D [781]-IDIR [782]-IXIY [783]-LDIR [784]-M [785]-R
   [786]-RCMX000 [787]-a [788]-atoctal [789]-b [790]-d [791]-dotdirective
   [792]-e [793]-g [794]-h [795]-hashhex [796]-i [797]-l [798]-labelcol1
   [799]-m [800]-mCPU [801]-noprec [802]-o [803]-plus [804]-r [805]-s [806]-t
   [807]-ucase [808]-v [809]-x [810]BINARY [811]CALL [812]DEFB [813]DEFC
   [814]DEFGROUP [815]DEFINE [816]DEFL [817]DEFM [818]DEFS [819]DEFVARS
   [820]DEFW [821]EXTERN [822]FPP [823]GLOBAL [824]IF [825]IFDEF [826]IFNDEF
   [827]INCLUDE [828]INVOKE [829]LIB [830]LINE [831]LSTOFF [832]LSTON
   [833]MODULE [834]ORG [835]PUBLIC [836]XDEF [837]XLIB [838]XREF [839]Z80
   [840]Z88

   ══════════════════════════════════════════════════════════════════════════

   [841](top) [842](keywords) [843](index)

17. Index

     • [844]1. Usage ...

          • [845]1.1. ... as preprocessor
          • [846]1.2. ... as assembler
          • [847]1.3. ... as linker
          • [848]1.4. ... as librarian

     • [849]2. Environment Variables
     • [850]3. Options

          • [851]3.1. Help Options

               • [852]3.1.1. no arguments (show usage)
               • [853]3.1.2. [854]-h , -?, --help (show manual)
               • [855]3.1.3. [856]-v , --verbose (show progress)

          • [857]3.2. Preprocessor options

               • [858]3.2.1. [859]-atoctal (at is octal prefix)
               • [860]3.2.2. [861]-dotdirective (period is directive prefix)
               • [862]3.2.3. [863]-hashhex (hash is hex prefix)
               • [864]3.2.4. [865]-labelcol1 (labels at column 1)
               • [866]3.2.5. [867]-ucase (upper case)

          • [868]3.3. Assembly options

               • [869]3.3.1. [870]-noprec (no precedence in expression
                 evaluation)

          • [871]3.4. Environment Options

               • [872]3.4.1. [873]-IDIR , --inc-path=DIR (directory for
                 source files)
               • [874]3.4.2. [875]-LDIR , --lib-path=DIR (directory for
                 library)

          • [876]3.5. Code Generation Options

               • [877]3.5.1. [878]-mCPU , --cpu=CPU (select CPU)
               • [879]3.5.2. [880]-IXIY , - [881]-IXIY (swap IX and IY)
               • [882]3.5.3. --opt=speed (optimise for speed)
               • [883]3.5.4. --debug (debug information)

          • [884]3.6. Output File Options

               • [885]3.6.1. [886]-m , --map (create map file)

     • [887]4. Input Files

          • [888]4.1. Source File Format
          • [889]4.2. Comments
          • [890]4.3. Symbols
          • [891]4.4. Labels
          • [892]4.5. Numbers

               • [893]4.5.1. Decimal
               • [894]4.5.2. Hexadecimal
               • [895]4.5.3. Octal
               • [896]4.5.4. Binary
               • [897]4.5.5. Bitmaps

          • [898]4.6. Keywords
          • [899]4.7. Directives and Opcodes

     • [900]5. Object File Format

          • [901]5.1. Object Files
          • [902]5.2. Library File Format
          • [903]5.3. Format History

     • [904]6. z80asm Syntax

          • [905]6.1. Command line
          • [906]6.2. Command line options

               • [907]6.2.1. [908]-e <ext> : Use alternative source file
                 extension
               • [909]6.2.2. [910]-M <ext> : Use alternative object file
                 extension
               • [911]6.2.3. [912]-l : Create listing file output
               • [913]6.2.4. [914]-s : Create symbol table
               • [915]6.2.5. [916]-d : Assemble only updated files
               • [917]6.2.6. [918]-b : Link/relocate object files
               • [919]6.2.7. [920]-a : Combine [921]-d and [922]-b
               • [923]6.2.8. [924]-o <binary-filename> : Binary filename
               • [925]6.2.9. [926]-r <hex-address> : Re-define the [927]ORG
                 relocation address
               • [928]6.2.10. [929]-R : Generate address independent code
               • [930]6.2.11. [931]-g : Create global address definition file
               • [932]6.2.12. [933]-D <symbol> : Define a static symbol
               • [934]6.2.13. @<project-file> :1.3.16. Using a project file
               • [935]6.2.14. [936]-i <library-file> : Include library
                 modules during linking/relocation
               • [937]6.2.15. [938]-x : Create a library
               • [939]6.2.16. [940]-t <number> : Define tabulator distance
                 for text output files
               • [941]6.2.17. [942]-RCMX000 : Support the RCM2000/RCM3000
                 series of [943]Z80 -like CPU's
               • [944]6.2.18. [945]-plus : Support for the Ti83Plus
               • [946]6.2.19. [947]-C : Enable [948]LINE directive

          • [949]6.3. The [950]Z88 operating system definition files
          • [951]6.4. The supplied standard library [952]Z80 source files
          • [953]6.5. [954]Z88 module assembler application source
          • [955]6.6. File based compilation
          • [956]6.7. Modular source file design
          • [957]6.8. Scope of symbols in source modules
          • [958]6.9. Using arithmetic and relational expressions
          • [959]6.10. Free format of assembler source files
          • [960]6.11. Specification of filenames
          • [961]6.12. Including other source files into the current source
            file
          • [962]6.13. Conditional assembly in source file modules
          • [963]6.14. Undocumented [964]Z80 instruction code generation
          • [965]6.15. Object file generation
          • [966]6.16. Transfer of object files across platforms
          • [967]6.17. Date stamp controlled assembly
          • [968]6.18. Listing files
          • [969]6.19. Symbol information
          • [970]6.20. Linking and relocation of object modules into
            executable [971]Z80 machine code
          • [972]6.21. Address map files
          • [973]6.22. Symbol address definition files
          • [974]6.23. Error files
          • [975]6.24. Creating and using object file libraries for standard
            routines

     • [976]7. [977]Z80 module assembler file types

          • [978]7.1. The assembler file types and their extension names
          • [979]7.2. The file name extension identifier
          • [980]7.3. File types

               • [981]7.3.1. The source file extension, asm
               • [982]7.3.2. The object file extension, obj
               • [983]7.3.3. The error file extension, err
               • [984]7.3.4. The listing file extension, lst
               • [985]7.3.5. The symbol file extension, sym
               • [986]7.3.6. The executable file extension, bin
               • [987]7.3.7. The address map file extension, map
               • [988]7.3.8. The definition file extension, def
               • [989]7.3.9. The library file extension, lib

     • [990]8. Compiling files

          • [991]8.1. The assembler compiling process

               • [992]8.1.1. Stage 1, parsing and code generation of all
                 source files, object file generation
               • [993]8.1.2. Stage 2, linking object files and library
                 modules, producing executable code

          • [994]8.2. File names
          • [995]8.3. Portability of assembler file names
          • [996]8.4. Source file structure
          • [997]8.5. Using local, global and external symbols
          • [998]8.6. Defining symbol names
          • [999]8.7. Comments in source files
          • [1000]8.8. Defining symbolic address labels
          • [1001]8.9. Writing [1002]Z80 mnemonic instructions
          • [1003]8.10. Optional [1004]Z80 mnemonic instruction syntax
          • [1005]8.11. The undocumented [1006]Z80 instructions
          • [1007]8.12. Referencing library routines
          • [1008]8.13. Creating/updating libraries
          • [1009]8.14. Referencing routines in other compiled projects

     • [1010]9. Using expressions

          • [1011]9.1. Constant identifiers
          • [1012]9.2. Arithmetic operators
          • [1013]9.3. Relational operators
          • [1014]9.4. The ASMPC standard function
          • [1015]9.5. Symbol identifiers in expressions

     • [1016]10. Directive reference

          • [1017]10.1. [1018]BINARY "filename"
          • [1019]10.2. [1020]CALL _OZ <expression>
          • [1021]10.3. [1022]DEFB <8-bit expr>,{<8-bit expr>} (-128; 255)
          • [1023]10.4. [1024]DEFW <16-bit expr>,{<16-bit expr>} (-32768;
            65535)
          • [1025]10.5. [1026]DEFL <32-bit expr>,{<32-bit expr>}
            (-2147483647; 4294967295)
          • [1027]10.6. [1028]DEFC name=<32-bit expression>{, name=<32-bit
            expression>}
          • [1029]10.7. [1030]DEFM <string expression>|<8-bit expr>,...
          • [1031]10.8. [1032]DEFGROUP '{' name {',' name ['=' <8-bit
            expression>]} '}'
          • [1033]10.9. [1034]DEFINE name,{name}
          • [1035]10.10. [1036]DEFS <size>{, <fill-byte>}
          • [1037]10.11. [1038]DEFVARS <16-bit expression> '{' [<name>]
            [<storage_size> <size_multiplier>] '}'
          • [1039]10.12. [1040]EXTERN name {, name}
          • [1041]10.13. [1042]FPP <8-bit expression>
          • [1043]10.14. [1044]GLOBAL name {, name}
          • [1045]10.15. [1046]IF <logical expression> ... [ELSE] ... ENDIF
          • [1047]10.16. [1048]IFDEF <name> ... [ELSE] ... ENDIF
          • [1049]10.17. [1050]IFNDEF <name> ... [ELSE] ... ENDIF
          • [1051]10.18. [1052]INCLUDE "filename"
          • [1053]10.19. [1054]INVOKE <16-bit expression>
          • [1055]10.20. [1056]LIB name {,name}
          • [1057]10.21. [1058]LINE <32-bit expr> [ , "file-name" ]
          • [1059]10.22. [1060]LSTOFF
          • [1061]10.23. [1062]LSTON
          • [1063]10.24. [1064]MODULE name
          • [1065]10.25. [1066]ORG <16-bit expression>
          • [1067]10.26. [1068]PUBLIC name {, name}
          • [1069]10.27. [1070]XDEF name {, name}
          • [1071]10.28. [1072]XLIB name
          • [1073]10.29. [1074]XREF name {, name}

     • [1075]11. Run time error messages
     • [1076]12. Backlog
     • [1077]13. References
     • [1078]14. Copyright
     • [1079]15. License
     • [1080]16. Keywords
     • [1081]17. Index

    

References

   Visible links
   1. http://www.z88dk.org/
   2. file://z80asm-future.html#7
   3. file://z80asm-future.html#top
   4. file://z80asm-future.html#keywords
   5. file://z80asm-future.html#index
   6. file://z80asm-future.html#top
   7. file://z80asm-future.html#keywords
   8. file://z80asm-future.html#index
   9. file://z80asm-future.html#top
  10. file://z80asm-future.html#keywords
  11. file://z80asm-future.html#index
  12. file://z80asm-future.html#top
  13. file://z80asm-future.html#keywords
  14. file://z80asm-future.html#index
  15. file://z80asm-future.html#top
  16. file://z80asm-future.html#keywords
  17. file://z80asm-future.html#index
  18. file://z80asm-future.html#top
  19. file://z80asm-future.html#keywords
  20. file://z80asm-future.html#index
  21. file://z80asm-future.html#top
  22. file://z80asm-future.html#keywords
  23. file://z80asm-future.html#index
  24. file://z80asm-future.html#top
  25. file://z80asm-future.html#keywords
  26. file://z80asm-future.html#index
  27. file://z80asm-future.html#top
  28. file://z80asm-future.html#keywords
  29. file://z80asm-future.html#index
  30. file://z80asm-future.html#top
  31. file://z80asm-future.html#keywords
  32. file://z80asm-future.html#index
  33. file://z80asm-future.html#top
  34. file://z80asm-future.html#keywords
  35. file://z80asm-future.html#index
  36. file://z80asm-future.html#top
  37. file://z80asm-future.html#keywords
  38. file://z80asm-future.html#index
  39. file://z80asm-future.html#top
  40. file://z80asm-future.html#keywords
  41. file://z80asm-future.html#index
  42. file://z80asm-future.html#top
  43. file://z80asm-future.html#keywords
  44. file://z80asm-future.html#index
  45. file://z80asm-future.html#top
  46. file://z80asm-future.html#keywords
  47. file://z80asm-future.html#index
  48. file://z80asm-future.html#top
  49. file://z80asm-future.html#keywords
  50. file://z80asm-future.html#index
  51. file://z80asm-future.html#top
  52. file://z80asm-future.html#keywords
  53. file://z80asm-future.html#index
  54. file://z80asm-future.html#top
  55. file://z80asm-future.html#keywords
  56. file://z80asm-future.html#index
  57. file://z80asm-future.html#top
  58. file://z80asm-future.html#keywords
  59. file://z80asm-future.html#index
  60. file://z80asm-future.html#top
  61. file://z80asm-future.html#keywords
  62. file://z80asm-future.html#index
  63. file://z80asm-future.html#top
  64. file://z80asm-future.html#keywords
  65. file://z80asm-future.html#index
  66. file://z80asm-future.html#top
  67. file://z80asm-future.html#keywords
  68. file://z80asm-future.html#index
  69. file://z80asm-future.html#top
  70. file://z80asm-future.html#keywords
  71. file://z80asm-future.html#index
  72. file://z80asm-future.html#top
  73. file://z80asm-future.html#keywords
  74. file://z80asm-future.html#index
  75. file://z80asm-future.html#7
  76. file://z80asm-future.html#7
  77. file://z80asm-future.html#7
  78. file://z80asm-future.html#10_2
  79. file://z80asm-future.html#7
  80. file://z80asm-future.html#10_19
  81. file://z80asm-future.html#10_2
  82. file://z80asm-future.html#10_19
  83. file://z80asm-future.html#10_4
  84. file://z80asm-future.html#top
  85. file://z80asm-future.html#keywords
  86. file://z80asm-future.html#index
  87. file://z80asm-future.html#top
  88. file://z80asm-future.html#keywords
  89. file://z80asm-future.html#index
  90. file://z80asm-future.html#top
  91. file://z80asm-future.html#keywords
  92. file://z80asm-future.html#index
  93. file://z80asm-future.html#top
  94. file://z80asm-future.html#keywords
  95. file://z80asm-future.html#index
  96. file://z80asm-future.html#top
  97. file://z80asm-future.html#keywords
  98. file://z80asm-future.html#index
  99. file://z80asm-future.html#top
 100. file://z80asm-future.html#keywords
 101. file://z80asm-future.html#index
 102. file://z80asm-future.html#top
 103. file://z80asm-future.html#keywords
 104. file://z80asm-future.html#index
 105. file://z80asm-future.html#top
 106. file://z80asm-future.html#keywords
 107. file://z80asm-future.html#index
 108. file://z80asm-future.html#top
 109. file://z80asm-future.html#keywords
 110. file://z80asm-future.html#index
 111. file://z80asm-future.html#top
 112. file://z80asm-future.html#keywords
 113. file://z80asm-future.html#index
 114. file://z80asm-future.html#top
 115. file://z80asm-future.html#keywords
 116. file://z80asm-future.html#index
 117. file://z80asm-future.html#top
 118. file://z80asm-future.html#keywords
 119. file://z80asm-future.html#index
 120. file://z80asm-future.html#top
 121. file://z80asm-future.html#keywords
 122. file://z80asm-future.html#index
 123. file://z80asm-future.html#top
 124. file://z80asm-future.html#keywords
 125. file://z80asm-future.html#index
 126. file://z80asm-future.html#top
 127. file://z80asm-future.html#keywords
 128. file://z80asm-future.html#index
 129. file://z80asm-future.html#top
 130. file://z80asm-future.html#keywords
 131. file://z80asm-future.html#index
 132. file://z80asm-future.html#top
 133. file://z80asm-future.html#keywords
 134. file://z80asm-future.html#index
 135. file://z80asm-future.html#top
 136. file://z80asm-future.html#keywords
 137. file://z80asm-future.html#index
 138. file://z80asm-future.html#top
 139. file://z80asm-future.html#keywords
 140. file://z80asm-future.html#index
 141. file://z80asm-future.html#7
 142. file://z80asm-future.html#7
 143. file://z80asm-future.html#top
 144. file://z80asm-future.html#keywords
 145. file://z80asm-future.html#index
 146. file://z80asm-future.html#10_25
 147. file://z80asm-future.html#10_25
 148. file://z80asm-future.html#10_25
 149. file://z80asm-future.html#10_25
 150. file://z80asm-future.html#top
 151. file://z80asm-future.html#keywords
 152. file://z80asm-future.html#index
 153. file://z80asm-future.html#top
 154. file://z80asm-future.html#keywords
 155. file://z80asm-future.html#index
 156. file://z80asm-future.html#10_6
 157. file://z80asm-future.html#10_25
 158. file://z80asm-future.html#top
 159. file://z80asm-future.html#keywords
 160. file://z80asm-future.html#index
 161. file://z80asm-future.html#7
 162. file://z80asm-future.html#7
 163. mailto:gbs@image.dk
 164. file://z80asm-future.html#top
 165. file://z80asm-future.html#keywords
 166. file://z80asm-future.html#index
 167. file://z80asm-future.html#top
 168. file://z80asm-future.html#keywords
 169. file://z80asm-future.html#index
 170. file://z80asm-future.html#top
 171. file://z80asm-future.html#keywords
 172. file://z80asm-future.html#index
 173. file://z80asm-future.html#top
 174. file://z80asm-future.html#keywords
 175. file://z80asm-future.html#index
 176. file://z80asm-future.html#top
 177. file://z80asm-future.html#keywords
 178. file://z80asm-future.html#index
 179. file://z80asm-future.html#top
 180. file://z80asm-future.html#keywords
 181. file://z80asm-future.html#index
 182. file://z80asm-future.html#top
 183. file://z80asm-future.html#keywords
 184. file://z80asm-future.html#index
 185. file://z80asm-future.html#7
 186. file://z80asm-future.html#7
 187. file://z80asm-future.html#6_2_5
 188. file://z80asm-future.html#6_2_5
 189. file://z80asm-future.html#top
 190. file://z80asm-future.html#keywords
 191. file://z80asm-future.html#index
 192. file://z80asm-future.html#6_2_6
 193. file://z80asm-future.html#7
 194. file://z80asm-future.html#6_2_7
 195. file://z80asm-future.html#6_2_5
 196. file://z80asm-future.html#10_25
 197. file://z80asm-future.html#10_25
 198. file://z80asm-future.html#10_25
 199. file://z80asm-future.html#10_25
 200. file://z80asm-future.html#6_2_9
 201. file://z80asm-future.html#10_25
 202. file://z80asm-future.html#top
 203. file://z80asm-future.html#keywords
 204. file://z80asm-future.html#index
 205. file://z80asm-future.html#6_2_6
 206. file://z80asm-future.html#6_2_5
 207. file://z80asm-future.html#top
 208. file://z80asm-future.html#keywords
 209. file://z80asm-future.html#index
 210. file://z80asm-future.html#top
 211. file://z80asm-future.html#keywords
 212. file://z80asm-future.html#index
 213. file://z80asm-future.html#10_25
 214. file://z80asm-future.html#6_2_9
 215. file://z80asm-future.html#6_2_9
 216. file://z80asm-future.html#10_25
 217. file://z80asm-future.html#10_25
 218. file://z80asm-future.html#6_5
 219. file://z80asm-future.html#10_25
 220. file://z80asm-future.html#6_2_9
 221. file://z80asm-future.html#top
 222. file://z80asm-future.html#keywords
 223. file://z80asm-future.html#index
 224. file://z80asm-future.html#7
 225. file://z80asm-future.html#7
 226. file://z80asm-future.html#7
 227. file://z80asm-future.html#10_25
 228. file://z80asm-future.html#6_2_10
 229. file://z80asm-future.html#6_2_7
 230. file://z80asm-future.html#6_2_6
 231. file://z80asm-future.html#6_5
 232. file://z80asm-future.html#10_2
 233. file://z80asm-future.html#6_2_10
 234. file://z80asm-future.html#7
 235. file://z80asm-future.html#10_25
 236. file://z80asm-future.html#7
 237. file://z80asm-future.html#top
 238. file://z80asm-future.html#keywords
 239. file://z80asm-future.html#index
 240. file://z80asm-future.html#10_6
 241. file://z80asm-future.html#10_27
 242. file://z80asm-future.html#10_25
 243. file://z80asm-future.html#6_2_9
 244. file://z80asm-future.html#6_5
 245. file://z80asm-future.html#10_6
 246. file://z80asm-future.html#6_5
 247. file://z80asm-future.html#top
 248. file://z80asm-future.html#keywords
 249. file://z80asm-future.html#index
 250. file://z80asm-future.html#6_5
 251. file://z80asm-future.html#top
 252. file://z80asm-future.html#keywords
 253. file://z80asm-future.html#index
 254. file://z80asm-future.html#top
 255. file://z80asm-future.html#keywords
 256. file://z80asm-future.html#index
 257. file://z80asm-future.html#6_2_14
 258. file://z80asm-future.html#top
 259. file://z80asm-future.html#keywords
 260. file://z80asm-future.html#index
 261. file://z80asm-future.html#6_2_15
 262. file://z80asm-future.html#10_28
 263. file://z80asm-future.html#7
 264. file://z80asm-future.html#top
 265. file://z80asm-future.html#keywords
 266. file://z80asm-future.html#index
 267. file://z80asm-future.html#7
 268. file://z80asm-future.html#10_27
 269. file://z80asm-future.html#6_2_16
 270. file://z80asm-future.html#top
 271. file://z80asm-future.html#keywords
 272. file://z80asm-future.html#index
 273. file://z80asm-future.html#7
 274. file://z80asm-future.html#top
 275. file://z80asm-future.html#keywords
 276. file://z80asm-future.html#index
 277. file://z80asm-future.html#10_19
 278. file://z80asm-future.html#10_2
 279. file://z80asm-future.html#top
 280. file://z80asm-future.html#keywords
 281. file://z80asm-future.html#index
 282. file://z80asm-future.html#10_21
 283. file://z80asm-future.html#top
 284. file://z80asm-future.html#keywords
 285. file://z80asm-future.html#index
 286. file://z80asm-future.html#6_5
 287. file://z80asm-future.html#top
 288. file://z80asm-future.html#keywords
 289. file://z80asm-future.html#index
 290. file://z80asm-future.html#6_5
 291. file://z80asm-future.html#7
 292. file://z80asm-future.html#7
 293. file://z80asm-future.html#top
 294. file://z80asm-future.html#keywords
 295. file://z80asm-future.html#index
 296. file://z80asm-future.html#6_5
 297. file://z80asm-future.html#6_5
 298. file://z80asm-future.html#7
 299. file://z80asm-future.html#top
 300. file://z80asm-future.html#keywords
 301. file://z80asm-future.html#index
 302. file://z80asm-future.html#top
 303. file://z80asm-future.html#keywords
 304. file://z80asm-future.html#index
 305. file://z80asm-future.html#top
 306. file://z80asm-future.html#keywords
 307. file://z80asm-future.html#index
 308. file://z80asm-future.html#10_12
 309. file://z80asm-future.html#10_26
 310. file://z80asm-future.html#10_12
 311. file://z80asm-future.html#10_26
 312. file://z80asm-future.html#10_14
 313. file://z80asm-future.html#top
 314. file://z80asm-future.html#keywords
 315. file://z80asm-future.html#index
 316. file://z80asm-future.html#7
 317. file://z80asm-future.html#top
 318. file://z80asm-future.html#keywords
 319. file://z80asm-future.html#index
 320. file://z80asm-future.html#7
 321. file://z80asm-future.html#top
 322. file://z80asm-future.html#keywords
 323. file://z80asm-future.html#index
 324. file://z80asm-future.html#top
 325. file://z80asm-future.html#keywords
 326. file://z80asm-future.html#index
 327. file://z80asm-future.html#top
 328. file://z80asm-future.html#keywords
 329. file://z80asm-future.html#index
 330. file://z80asm-future.html#10_15
 331. file://z80asm-future.html#10_16
 332. file://z80asm-future.html#10_17
 333. file://z80asm-future.html#top
 334. file://z80asm-future.html#keywords
 335. file://z80asm-future.html#index
 336. file://z80asm-future.html#7
 337. file://z80asm-future.html#6_5
 338. file://z80asm-future.html#top
 339. file://z80asm-future.html#keywords
 340. file://z80asm-future.html#index
 341. file://z80asm-future.html#7
 342. file://z80asm-future.html#top
 343. file://z80asm-future.html#keywords
 344. file://z80asm-future.html#index
 345. file://z80asm-future.html#7
 346. file://z80asm-future.html#top
 347. file://z80asm-future.html#keywords
 348. file://z80asm-future.html#index
 349. file://z80asm-future.html#top
 350. file://z80asm-future.html#keywords
 351. file://z80asm-future.html#index
 352. file://z80asm-future.html#7
 353. file://z80asm-future.html#top
 354. file://z80asm-future.html#keywords
 355. file://z80asm-future.html#index
 356. file://z80asm-future.html#top
 357. file://z80asm-future.html#keywords
 358. file://z80asm-future.html#index
 359. file://z80asm-future.html#7
 360. file://z80asm-future.html#10_25
 361. file://z80asm-future.html#top
 362. file://z80asm-future.html#keywords
 363. file://z80asm-future.html#index
 364. file://z80asm-future.html#top
 365. file://z80asm-future.html#keywords
 366. file://z80asm-future.html#index
 367. file://z80asm-future.html#top
 368. file://z80asm-future.html#keywords
 369. file://z80asm-future.html#index
 370. file://z80asm-future.html#top
 371. file://z80asm-future.html#keywords
 372. file://z80asm-future.html#index
 373. file://z80asm-future.html#top
 374. file://z80asm-future.html#keywords
 375. file://z80asm-future.html#index
 376. file://z80asm-future.html#top
 377. file://z80asm-future.html#keywords
 378. file://z80asm-future.html#index
 379. file://z80asm-future.html#7
 380. file://z80asm-future.html#top
 381. file://z80asm-future.html#keywords
 382. file://z80asm-future.html#index
 383. file://z80asm-future.html#top
 384. file://z80asm-future.html#keywords
 385. file://z80asm-future.html#index
 386. file://z80asm-future.html#top
 387. file://z80asm-future.html#keywords
 388. file://z80asm-future.html#index
 389. file://z80asm-future.html#6_2_1
 390. file://z80asm-future.html#top
 391. file://z80asm-future.html#keywords
 392. file://z80asm-future.html#index
 393. file://z80asm-future.html#6_2_2
 394. file://z80asm-future.html#top
 395. file://z80asm-future.html#keywords
 396. file://z80asm-future.html#index
 397. file://z80asm-future.html#top
 398. file://z80asm-future.html#keywords
 399. file://z80asm-future.html#index
 400. file://z80asm-future.html#7
 401. file://z80asm-future.html#top
 402. file://z80asm-future.html#keywords
 403. file://z80asm-future.html#index
 404. file://z80asm-future.html#top
 405. file://z80asm-future.html#keywords
 406. file://z80asm-future.html#index
 407. file://z80asm-future.html#7
 408. file://z80asm-future.html#7
 409. file://z80asm-future.html#6_2_8
 410. file://z80asm-future.html#6_2_8
 411. file://z80asm-future.html#top
 412. file://z80asm-future.html#keywords
 413. file://z80asm-future.html#index
 414. file://z80asm-future.html#top
 415. file://z80asm-future.html#keywords
 416. file://z80asm-future.html#index
 417. file://z80asm-future.html#top
 418. file://z80asm-future.html#keywords
 419. file://z80asm-future.html#index
 420. file://z80asm-future.html#6_2_15
 421. file://z80asm-future.html#6_2_14
 422. file://z80asm-future.html#top
 423. file://z80asm-future.html#keywords
 424. file://z80asm-future.html#index
 425. file://z80asm-future.html#top
 426. file://z80asm-future.html#keywords
 427. file://z80asm-future.html#index
 428. file://z80asm-future.html#7
 429. file://z80asm-future.html#top
 430. file://z80asm-future.html#keywords
 431. file://z80asm-future.html#index
 432. file://z80asm-future.html#7
 433. file://z80asm-future.html#7
 434. file://z80asm-future.html#top
 435. file://z80asm-future.html#keywords
 436. file://z80asm-future.html#index
 437. file://z80asm-future.html#10_25
 438. file://z80asm-future.html#top
 439. file://z80asm-future.html#keywords
 440. file://z80asm-future.html#index
 441. file://z80asm-future.html#top
 442. file://z80asm-future.html#keywords
 443. file://z80asm-future.html#index
 444. file://z80asm-future.html#7
 445. file://z80asm-future.html#top
 446. file://z80asm-future.html#keywords
 447. file://z80asm-future.html#index
 448. file://z80asm-future.html#6_5
 449. file://z80asm-future.html#top
 450. file://z80asm-future.html#keywords
 451. file://z80asm-future.html#index
 452. file://z80asm-future.html#7
 453. file://z80asm-future.html#10_29
 454. file://z80asm-future.html#10_27
 455. file://z80asm-future.html#10_29
 456. file://z80asm-future.html#10_27
 457. file://z80asm-future.html#10_20
 458. file://z80asm-future.html#top
 459. file://z80asm-future.html#keywords
 460. file://z80asm-future.html#index
 461. file://z80asm-future.html#7
 462. file://z80asm-future.html#10_6
 463. file://z80asm-future.html#6_5
 464. file://z80asm-future.html#10_6
 465. file://z80asm-future.html#10_6
 466. file://z80asm-future.html#10_18
 467. file://z80asm-future.html#10_6
 468. file://z80asm-future.html#10_11
 469. file://z80asm-future.html#10_6
 470. file://z80asm-future.html#10_11
 471. file://z80asm-future.html#7
 472. file://z80asm-future.html#10_11
 473. file://z80asm-future.html#10_11
 474. file://z80asm-future.html#10_8
 475. file://z80asm-future.html#top
 476. file://z80asm-future.html#keywords
 477. file://z80asm-future.html#index
 478. file://z80asm-future.html#7
 479. file://z80asm-future.html#7
 480. file://z80asm-future.html#7
 481. file://z80asm-future.html#top
 482. file://z80asm-future.html#keywords
 483. file://z80asm-future.html#index
 484. file://z80asm-future.html#10_26
 485. file://z80asm-future.html#10_26
 486. file://z80asm-future.html#top
 487. file://z80asm-future.html#keywords
 488. file://z80asm-future.html#index
 489. file://z80asm-future.html#7
 490. file://z80asm-future.html#10_2
 491. file://z80asm-future.html#top
 492. file://z80asm-future.html#keywords
 493. file://z80asm-future.html#index
 494. file://z80asm-future.html#top
 495. file://z80asm-future.html#keywords
 496. file://z80asm-future.html#index
 497. file://z80asm-future.html#7
 498. file://z80asm-future.html#6_5
 499. file://z80asm-future.html#6_5
 500. file://z80asm-future.html#top
 501. file://z80asm-future.html#keywords
 502. file://z80asm-future.html#index
 503. file://z80asm-future.html#6_2_14
 504. file://z80asm-future.html#10_20
 505. file://z80asm-future.html#10_20
 506. file://z80asm-future.html#top
 507. file://z80asm-future.html#keywords
 508. file://z80asm-future.html#index
 509. file://z80asm-future.html#10_28
 510. file://z80asm-future.html#10_20
 511. file://z80asm-future.html#10_28
 512. file://z80asm-future.html#6_2_15
 513. file://z80asm-future.html#top
 514. file://z80asm-future.html#keywords
 515. file://z80asm-future.html#index
 516. file://z80asm-future.html#6_2_11
 517. file://z80asm-future.html#10_6
 518. file://z80asm-future.html#10_27
 519. file://z80asm-future.html#6_2_7
 520. file://z80asm-future.html#6_2_11
 521. file://z80asm-future.html#6_2_6
 522. file://z80asm-future.html#10_18
 523. file://z80asm-future.html#10_27
 524. file://z80asm-future.html#10_18
 525. file://z80asm-future.html#10_6
 526. file://z80asm-future.html#10_29
 527. file://z80asm-future.html#6_2_11
 528. file://z80asm-future.html#10_29
 529. file://z80asm-future.html#10_18
 530. file://z80asm-future.html#10_6
 531. file://z80asm-future.html#6_2_11
 532. file://z80asm-future.html#10_29
 533. file://z80asm-future.html#10_27
 534. file://z80asm-future.html#6_2_11
 535. file://z80asm-future.html#top
 536. file://z80asm-future.html#keywords
 537. file://z80asm-future.html#index
 538. file://z80asm-future.html#7
 539. file://z80asm-future.html#7
 540. file://z80asm-future.html#7
 541. file://z80asm-future.html#7
 542. file://z80asm-future.html#top
 543. file://z80asm-future.html#keywords
 544. file://z80asm-future.html#index
 545. file://z80asm-future.html#top
 546. file://z80asm-future.html#keywords
 547. file://z80asm-future.html#index
 548. file://z80asm-future.html#top
 549. file://z80asm-future.html#keywords
 550. file://z80asm-future.html#index
 551. file://z80asm-future.html#10_15
 552. file://z80asm-future.html#top
 553. file://z80asm-future.html#keywords
 554. file://z80asm-future.html#index
 555. file://z80asm-future.html#top
 556. file://z80asm-future.html#keywords
 557. file://z80asm-future.html#index
 558. file://z80asm-future.html#10_29
 559. file://z80asm-future.html#10_20
 560. file://z80asm-future.html#top
 561. file://z80asm-future.html#keywords
 562. file://z80asm-future.html#index
 563. file://z80asm-future.html#7
 564. file://z80asm-future.html#7
 565. file://z80asm-future.html#7
 566. file://z80asm-future.html#top
 567. file://z80asm-future.html#keywords
 568. file://z80asm-future.html#index
 569. file://z80asm-future.html#10_1
 570. file://z80asm-future.html#top
 571. file://z80asm-future.html#keywords
 572. file://z80asm-future.html#index
 573. file://z80asm-future.html#6_5
 574. file://z80asm-future.html#top
 575. file://z80asm-future.html#keywords
 576. file://z80asm-future.html#index
 577. file://z80asm-future.html#top
 578. file://z80asm-future.html#keywords
 579. file://z80asm-future.html#index
 580. file://z80asm-future.html#top
 581. file://z80asm-future.html#keywords
 582. file://z80asm-future.html#index
 583. file://z80asm-future.html#top
 584. file://z80asm-future.html#keywords
 585. file://z80asm-future.html#index
 586. file://z80asm-future.html#6_5
 587. file://z80asm-future.html#10_6
 588. file://z80asm-future.html#top
 589. file://z80asm-future.html#keywords
 590. file://z80asm-future.html#index
 591. file://z80asm-future.html#10_7
 592. file://z80asm-future.html#top
 593. file://z80asm-future.html#keywords
 594. file://z80asm-future.html#index
 595. file://z80asm-future.html#10_8
 596. file://z80asm-future.html#10_8
 597. file://z80asm-future.html#10_8
 598. file://z80asm-future.html#10_6
 599. file://z80asm-future.html#top
 600. file://z80asm-future.html#keywords
 601. file://z80asm-future.html#index
 602. file://z80asm-future.html#top
 603. file://z80asm-future.html#keywords
 604. file://z80asm-future.html#index
 605. file://z80asm-future.html#10_10
 606. file://z80asm-future.html#top
 607. file://z80asm-future.html#keywords
 608. file://z80asm-future.html#index
 609. file://z80asm-future.html#10_11
 610. file://z80asm-future.html#10_11
 611. file://z80asm-future.html#10_11
 612. file://z80asm-future.html#top
 613. file://z80asm-future.html#keywords
 614. file://z80asm-future.html#index
 615. file://z80asm-future.html#10_26
 616. file://z80asm-future.html#top
 617. file://z80asm-future.html#keywords
 618. file://z80asm-future.html#index
 619. file://z80asm-future.html#6_5
 620. file://z80asm-future.html#6_5
 621. file://z80asm-future.html#top
 622. file://z80asm-future.html#keywords
 623. file://z80asm-future.html#index
 624. file://z80asm-future.html#10_14
 625. file://z80asm-future.html#10_26
 626. file://z80asm-future.html#10_12
 627. file://z80asm-future.html#top
 628. file://z80asm-future.html#keywords
 629. file://z80asm-future.html#index
 630. file://z80asm-future.html#top
 631. file://z80asm-future.html#keywords
 632. file://z80asm-future.html#index
 633. file://z80asm-future.html#top
 634. file://z80asm-future.html#keywords
 635. file://z80asm-future.html#index
 636. file://z80asm-future.html#top
 637. file://z80asm-future.html#keywords
 638. file://z80asm-future.html#index
 639. file://z80asm-future.html#6_5
 640. file://z80asm-future.html#10_18
 641. file://z80asm-future.html#10_18
 642. file://z80asm-future.html#10_18
 643. file://z80asm-future.html#10_18
 644. file://z80asm-future.html#top
 645. file://z80asm-future.html#keywords
 646. file://z80asm-future.html#index
 647. file://z80asm-future.html#10_2
 648. file://z80asm-future.html#6_2_18
 649. file://z80asm-future.html#10_2
 650. file://z80asm-future.html#top
 651. file://z80asm-future.html#keywords
 652. file://z80asm-future.html#index
 653. file://z80asm-future.html#10_12
 654. file://z80asm-future.html#top
 655. file://z80asm-future.html#keywords
 656. file://z80asm-future.html#index
 657. file://z80asm-future.html#top
 658. file://z80asm-future.html#keywords
 659. file://z80asm-future.html#index
 660. file://z80asm-future.html#top
 661. file://z80asm-future.html#keywords
 662. file://z80asm-future.html#index
 663. file://z80asm-future.html#10_22
 664. file://z80asm-future.html#10_18
 665. file://z80asm-future.html#top
 666. file://z80asm-future.html#keywords
 667. file://z80asm-future.html#index
 668. file://z80asm-future.html#10_24
 669. file://z80asm-future.html#10_24
 670. file://z80asm-future.html#top
 671. file://z80asm-future.html#keywords
 672. file://z80asm-future.html#index
 673. file://z80asm-future.html#10_25
 674. file://z80asm-future.html#10_25
 675. file://z80asm-future.html#10_25
 676. file://z80asm-future.html#10_25
 677. file://z80asm-future.html#6_2_9
 678. file://z80asm-future.html#10_25
 679. file://z80asm-future.html#10_25
 680. file://z80asm-future.html#10_25
 681. file://z80asm-future.html#top
 682. file://z80asm-future.html#keywords
 683. file://z80asm-future.html#index
 684. file://z80asm-future.html#top
 685. file://z80asm-future.html#keywords
 686. file://z80asm-future.html#index
 687. file://z80asm-future.html#10_26
 688. file://z80asm-future.html#top
 689. file://z80asm-future.html#keywords
 690. file://z80asm-future.html#index
 691. file://z80asm-future.html#10_26
 692. file://z80asm-future.html#top
 693. file://z80asm-future.html#keywords
 694. file://z80asm-future.html#index
 695. file://z80asm-future.html#10_12
 696. file://z80asm-future.html#top
 697. file://z80asm-future.html#keywords
 698. file://z80asm-future.html#index
 699. file://z80asm-future.html#7
 700. file://z80asm-future.html#10_3
 701. file://z80asm-future.html#10_29
 702. file://z80asm-future.html#6_5
 703. file://z80asm-future.html#6_5
 704. file://z80asm-future.html#7
 705. file://z80asm-future.html#7
 706. file://z80asm-future.html#6_5
 707. file://z80asm-future.html#7
 708. file://z80asm-future.html#10_6
 709. file://z80asm-future.html#10_11
 710. file://z80asm-future.html#10_8
 711. file://z80asm-future.html#10_24
 712. file://z80asm-future.html#10_24
 713. file://z80asm-future.html#10_28
 714. file://z80asm-future.html#10_28
 715. file://z80asm-future.html#10_29
 716. file://z80asm-future.html#10_27
 717. file://z80asm-future.html#10_29
 718. file://z80asm-future.html#10_27
 719. file://z80asm-future.html#10_29
 720. file://z80asm-future.html#10_25
 721. file://z80asm-future.html#10_25
 722. file://z80asm-future.html#10_29
 723. file://z80asm-future.html#10_20
 724. file://z80asm-future.html#7
 725. file://z80asm-future.html#7
 726. file://z80asm-future.html#10_18
 727. file://z80asm-future.html#10_18
 728. file://z80asm-future.html#top
 729. file://z80asm-future.html#keywords
 730. file://z80asm-future.html#index
 731. file://z80asm-future.html#6_2_5
 732. file://z80asm-future.html#10_15
 733. file://z80asm-future.html#10_15
 734. file://z80asm-future.html#10_18
 735. file://z80asm-future.html#10_15
 736. file://z80asm-future.html#3_6_1
 737. file://z80asm-future.html#6_2_12
 738. file://z80asm-future.html#10_18
 739. file://z80asm-future.html#10_1
 740. file://z80asm-future.html#10_18
 741. file://z80asm-future.html#10_1
 742. file://z80asm-future.html#7
 743. file://z80asm-future.html#10_6
 744. file://z80asm-future.html#10_15
 745. file://z80asm-future.html#7
 746. file://z80asm-future.html#10_6
 747. file://z80asm-future.html#10_14
 748. file://z80asm-future.html#10_14
 749. file://z80asm-future.html#10_26
 750. file://z80asm-future.html#10_12
 751. file://z80asm-future.html#10_15
 752. file://z80asm-future.html#10_25
 753. file://z80asm-future.html#10_25
 754. file://z80asm-future.html#10_25
 755. file://z80asm-future.html#7
 756. file://z80asm-future.html#10_6
 757. file://z80asm-future.html#10_14
 758. file://z80asm-future.html#10_14
 759. file://z80asm-future.html#10_26
 760. file://z80asm-future.html#10_12
 761. file://z80asm-future.html#10_15
 762. file://z80asm-future.html#7
 763. file://z80asm-future.html#10_6
 764. file://z80asm-future.html#10_15
 765. file://z80asm-future.html#top
 766. file://z80asm-future.html#keywords
 767. file://z80asm-future.html#index
 768. http://www.cpcalive.com/docs/TASMMAN.HTM
 769. file://z80asm-future.html#top
 770. file://z80asm-future.html#keywords
 771. file://z80asm-future.html#index
 772. file://z80asm-future.html#top
 773. file://z80asm-future.html#keywords
 774. file://z80asm-future.html#index
 775. http://www.perlfoundation.org/artisticlicense2_0
 776. file://z80asm-future.html#top
 777. file://z80asm-future.html#keywords
 778. file://z80asm-future.html#index
 779. file://z80asm-future.html#6_2_19
 780. file://z80asm-future.html#6_2_12
 781. file://z80asm-future.html#3_4_1
 782. file://z80asm-future.html#3_5_2
 783. file://z80asm-future.html#3_4_2
 784. file://z80asm-future.html#6_2_2
 785. file://z80asm-future.html#6_2_10
 786. file://z80asm-future.html#6_2_17
 787. file://z80asm-future.html#6_2_7
 788. file://z80asm-future.html#3_2_1
 789. file://z80asm-future.html#6_2_6
 790. file://z80asm-future.html#6_2_5
 791. file://z80asm-future.html#3_2_2
 792. file://z80asm-future.html#6_2_1
 793. file://z80asm-future.html#6_2_11
 794. file://z80asm-future.html#3_1_2
 795. file://z80asm-future.html#3_2_3
 796. file://z80asm-future.html#6_2_14
 797. file://z80asm-future.html#6_2_3
 798. file://z80asm-future.html#3_2_4
 799. file://z80asm-future.html#3_6_1
 800. file://z80asm-future.html#3_5_1
 801. file://z80asm-future.html#3_3_1
 802. file://z80asm-future.html#6_2_8
 803. file://z80asm-future.html#6_2_18
 804. file://z80asm-future.html#6_2_9
 805. file://z80asm-future.html#6_2_4
 806. file://z80asm-future.html#6_2_16
 807. file://z80asm-future.html#3_2_5
 808. file://z80asm-future.html#3_1_3
 809. file://z80asm-future.html#6_2_15
 810. file://z80asm-future.html#10_1
 811. file://z80asm-future.html#10_2
 812. file://z80asm-future.html#10_3
 813. file://z80asm-future.html#10_6
 814. file://z80asm-future.html#10_8
 815. file://z80asm-future.html#10_9
 816. file://z80asm-future.html#10_5
 817. file://z80asm-future.html#10_7
 818. file://z80asm-future.html#10_10
 819. file://z80asm-future.html#10_11
 820. file://z80asm-future.html#10_4
 821. file://z80asm-future.html#10_12
 822. file://z80asm-future.html#10_13
 823. file://z80asm-future.html#10_14
 824. file://z80asm-future.html#10_15
 825. file://z80asm-future.html#10_16
 826. file://z80asm-future.html#10_17
 827. file://z80asm-future.html#10_18
 828. file://z80asm-future.html#10_19
 829. file://z80asm-future.html#10_20
 830. file://z80asm-future.html#10_21
 831. file://z80asm-future.html#10_22
 832. file://z80asm-future.html#10_23
 833. file://z80asm-future.html#10_24
 834. file://z80asm-future.html#10_25
 835. file://z80asm-future.html#10_26
 836. file://z80asm-future.html#10_27
 837. file://z80asm-future.html#10_28
 838. file://z80asm-future.html#10_29
 839. file://z80asm-future.html#7
 840. file://z80asm-future.html#6_5
 841. file://z80asm-future.html#top
 842. file://z80asm-future.html#keywords
 843. file://z80asm-future.html#index
 844. file://z80asm-future.html#1
 845. file://z80asm-future.html#1_1
 846. file://z80asm-future.html#1_2
 847. file://z80asm-future.html#1_3
 848. file://z80asm-future.html#1_4
 849. file://z80asm-future.html#2
 850. file://z80asm-future.html#3
 851. file://z80asm-future.html#3_1
 852. file://z80asm-future.html#3_1_1
 853. file://z80asm-future.html#3_1_2
 854. file://z80asm-future.html#3_1_2
 855. file://z80asm-future.html#3_1_3
 856. file://z80asm-future.html#3_1_3
 857. file://z80asm-future.html#3_2
 858. file://z80asm-future.html#3_2_1
 859. file://z80asm-future.html#3_2_1
 860. file://z80asm-future.html#3_2_2
 861. file://z80asm-future.html#3_2_2
 862. file://z80asm-future.html#3_2_3
 863. file://z80asm-future.html#3_2_3
 864. file://z80asm-future.html#3_2_4
 865. file://z80asm-future.html#3_2_4
 866. file://z80asm-future.html#3_2_5
 867. file://z80asm-future.html#3_2_5
 868. file://z80asm-future.html#3_3
 869. file://z80asm-future.html#3_3_1
 870. file://z80asm-future.html#3_3_1
 871. file://z80asm-future.html#3_4
 872. file://z80asm-future.html#3_4_1
 873. file://z80asm-future.html#3_4_1
 874. file://z80asm-future.html#3_4_2
 875. file://z80asm-future.html#3_4_2
 876. file://z80asm-future.html#3_5
 877. file://z80asm-future.html#3_5_1
 878. file://z80asm-future.html#3_5_1
 879. file://z80asm-future.html#3_5_2
 880. file://z80asm-future.html#3_5_2
 881. file://z80asm-future.html#3_5_2
 882. file://z80asm-future.html#3_5_3
 883. file://z80asm-future.html#3_5_4
 884. file://z80asm-future.html#3_6
 885. file://z80asm-future.html#3_6_1
 886. file://z80asm-future.html#3_6_1
 887. file://z80asm-future.html#4
 888. file://z80asm-future.html#4_1
 889. file://z80asm-future.html#4_2
 890. file://z80asm-future.html#4_3
 891. file://z80asm-future.html#4_4
 892. file://z80asm-future.html#4_5
 893. file://z80asm-future.html#4_5_1
 894. file://z80asm-future.html#4_5_2
 895. file://z80asm-future.html#4_5_3
 896. file://z80asm-future.html#4_5_4
 897. file://z80asm-future.html#4_5_5
 898. file://z80asm-future.html#4_6
 899. file://z80asm-future.html#4_7
 900. file://z80asm-future.html#5
 901. file://z80asm-future.html#5_1
 902. file://z80asm-future.html#5_2
 903. file://z80asm-future.html#5_3
 904. file://z80asm-future.html#6
 905. file://z80asm-future.html#6_1
 906. file://z80asm-future.html#6_2
 907. file://z80asm-future.html#6_2_1
 908. file://z80asm-future.html#6_2_1
 909. file://z80asm-future.html#6_2_2
 910. file://z80asm-future.html#6_2_2
 911. file://z80asm-future.html#6_2_3
 912. file://z80asm-future.html#6_2_3
 913. file://z80asm-future.html#6_2_4
 914. file://z80asm-future.html#6_2_4
 915. file://z80asm-future.html#6_2_5
 916. file://z80asm-future.html#6_2_5
 917. file://z80asm-future.html#6_2_6
 918. file://z80asm-future.html#6_2_6
 919. file://z80asm-future.html#6_2_7
 920. file://z80asm-future.html#6_2_7
 921. file://z80asm-future.html#6_2_5
 922. file://z80asm-future.html#6_2_6
 923. file://z80asm-future.html#6_2_8
 924. file://z80asm-future.html#6_2_8
 925. file://z80asm-future.html#6_2_9
 926. file://z80asm-future.html#6_2_9
 927. file://z80asm-future.html#10_25
 928. file://z80asm-future.html#6_2_10
 929. file://z80asm-future.html#6_2_10
 930. file://z80asm-future.html#6_2_11
 931. file://z80asm-future.html#6_2_11
 932. file://z80asm-future.html#6_2_12
 933. file://z80asm-future.html#6_2_12
 934. file://z80asm-future.html#6_2_13
 935. file://z80asm-future.html#6_2_14
 936. file://z80asm-future.html#6_2_14
 937. file://z80asm-future.html#6_2_15
 938. file://z80asm-future.html#6_2_15
 939. file://z80asm-future.html#6_2_16
 940. file://z80asm-future.html#6_2_16
 941. file://z80asm-future.html#6_2_17
 942. file://z80asm-future.html#6_2_17
 943. file://z80asm-future.html#7
 944. file://z80asm-future.html#6_2_18
 945. file://z80asm-future.html#6_2_18
 946. file://z80asm-future.html#6_2_19
 947. file://z80asm-future.html#6_2_19
 948. file://z80asm-future.html#10_21
 949. file://z80asm-future.html#6_3
 950. file://z80asm-future.html#6_5
 951. file://z80asm-future.html#6_4
 952. file://z80asm-future.html#7
 953. file://z80asm-future.html#6_5
 954. file://z80asm-future.html#6_5
 955. file://z80asm-future.html#6_6
 956. file://z80asm-future.html#6_7
 957. file://z80asm-future.html#6_8
 958. file://z80asm-future.html#6_9
 959. file://z80asm-future.html#6_10
 960. file://z80asm-future.html#6_11
 961. file://z80asm-future.html#6_12
 962. file://z80asm-future.html#6_13
 963. file://z80asm-future.html#6_14
 964. file://z80asm-future.html#7
 965. file://z80asm-future.html#6_15
 966. file://z80asm-future.html#6_16
 967. file://z80asm-future.html#6_17
 968. file://z80asm-future.html#6_18
 969. file://z80asm-future.html#6_19
 970. file://z80asm-future.html#6_20
 971. file://z80asm-future.html#7
 972. file://z80asm-future.html#6_21
 973. file://z80asm-future.html#6_22
 974. file://z80asm-future.html#6_23
 975. file://z80asm-future.html#6_24
 976. file://z80asm-future.html#7
 977. file://z80asm-future.html#7
 978. file://z80asm-future.html#7_1
 979. file://z80asm-future.html#7_2
 980. file://z80asm-future.html#7_3
 981. file://z80asm-future.html#7_3_1
 982. file://z80asm-future.html#7_3_2
 983. file://z80asm-future.html#7_3_3
 984. file://z80asm-future.html#7_3_4
 985. file://z80asm-future.html#7_3_5
 986. file://z80asm-future.html#7_3_6
 987. file://z80asm-future.html#7_3_7
 988. file://z80asm-future.html#7_3_8
 989. file://z80asm-future.html#7_3_9
 990. file://z80asm-future.html#8
 991. file://z80asm-future.html#8_1
 992. file://z80asm-future.html#8_1_1
 993. file://z80asm-future.html#8_1_2
 994. file://z80asm-future.html#8_2
 995. file://z80asm-future.html#8_3
 996. file://z80asm-future.html#8_4
 997. file://z80asm-future.html#8_5
 998. file://z80asm-future.html#8_6
 999. file://z80asm-future.html#8_7
1000. file://z80asm-future.html#8_8
1001. file://z80asm-future.html#8_9
1002. file://z80asm-future.html#7
1003. file://z80asm-future.html#8_10
1004. file://z80asm-future.html#7
1005. file://z80asm-future.html#8_11
1006. file://z80asm-future.html#7
1007. file://z80asm-future.html#8_12
1008. file://z80asm-future.html#8_13
1009. file://z80asm-future.html#8_14
1010. file://z80asm-future.html#9
1011. file://z80asm-future.html#9_1
1012. file://z80asm-future.html#9_2
1013. file://z80asm-future.html#9_3
1014. file://z80asm-future.html#9_4
1015. file://z80asm-future.html#9_5
1016. file://z80asm-future.html#10
1017. file://z80asm-future.html#10_1
1018. file://z80asm-future.html#10_1
1019. file://z80asm-future.html#10_2
1020. file://z80asm-future.html#10_2
1021. file://z80asm-future.html#10_3
1022. file://z80asm-future.html#10_3
1023. file://z80asm-future.html#10_4
1024. file://z80asm-future.html#10_4
1025. file://z80asm-future.html#10_5
1026. file://z80asm-future.html#10_5
1027. file://z80asm-future.html#10_6
1028. file://z80asm-future.html#10_6
1029. file://z80asm-future.html#10_7
1030. file://z80asm-future.html#10_7
1031. file://z80asm-future.html#10_8
1032. file://z80asm-future.html#10_8
1033. file://z80asm-future.html#10_9
1034. file://z80asm-future.html#10_9
1035. file://z80asm-future.html#10_10
1036. file://z80asm-future.html#10_10
1037. file://z80asm-future.html#10_11
1038. file://z80asm-future.html#10_11
1039. file://z80asm-future.html#10_12
1040. file://z80asm-future.html#10_12
1041. file://z80asm-future.html#10_13
1042. file://z80asm-future.html#10_13
1043. file://z80asm-future.html#10_14
1044. file://z80asm-future.html#10_14
1045. file://z80asm-future.html#10_15
1046. file://z80asm-future.html#10_15
1047. file://z80asm-future.html#10_16
1048. file://z80asm-future.html#10_16
1049. file://z80asm-future.html#10_17
1050. file://z80asm-future.html#10_17
1051. file://z80asm-future.html#10_18
1052. file://z80asm-future.html#10_18
1053. file://z80asm-future.html#10_19
1054. file://z80asm-future.html#10_19
1055. file://z80asm-future.html#10_20
1056. file://z80asm-future.html#10_20
1057. file://z80asm-future.html#10_21
1058. file://z80asm-future.html#10_21
1059. file://z80asm-future.html#10_22
1060. file://z80asm-future.html#10_22
1061. file://z80asm-future.html#10_23
1062. file://z80asm-future.html#10_23
1063. file://z80asm-future.html#10_24
1064. file://z80asm-future.html#10_24
1065. file://z80asm-future.html#10_25
1066. file://z80asm-future.html#10_25
1067. file://z80asm-future.html#10_26
1068. file://z80asm-future.html#10_26
1069. file://z80asm-future.html#10_27
1070. file://z80asm-future.html#10_27
1071. file://z80asm-future.html#10_28
1072. file://z80asm-future.html#10_28
1073. file://z80asm-future.html#10_29
1074. file://z80asm-future.html#10_29
1075. file://z80asm-future.html#11
1076. file://z80asm-future.html#12
1077. file://z80asm-future.html#13
1078. file://z80asm-future.html#14
1079. file://z80asm-future.html#15
1080. file://z80asm-future.html#16
1081. file://z80asm-future.html#17
