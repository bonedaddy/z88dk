  z80asm.md

                z80asm - Z80 module assembler, linker, librarian

   z80asm is part of the [1]z88dk project and is used as the back-end of the
   z88dk C compilers. It is not to be confused with other non-z88dk related
   projects with the same name.

   z80asm is a relocatable assembler, linker and librarian that can assemble
   Intel 8080/8085 and Z80-family assembly files into a relocatable object
   format, can manage sets of object files in libraries and can build binary
   images by linking these object files together. The binary images can be
   defined in different sections, to match the target architecture.

   NOTE: This document is a work-in-progress. It describes the functionality
   already working in the assembler in the z80asm2 branch. This document and
   the z80asm-future.md will converge as z80asm2 gets more features and
   converges to the current capability of z80asm in the master branch.

   ══════════════════════════════════════════════════════════════════════════

   [2](top) [3](keywords) [4](index)

1. Usage ...

   ══════════════════════════════════════════════════════════════════════════

   [5](top) [6](keywords) [7](index)

  1.1. ... as assembler

 z80asm [options] file...

   By default, i.e. without any options, assemble each of the listed files
   into relocatable object files with a .o extension.

   ══════════════════════════════════════════════════════════════════════════

   [8](top) [9](keywords) [10](index)

  1.2. ... as linker

 z80asm -b [options] [-ilibrary.lib...] file...

   Link the object files together and with any requested libraries into a set
   of binary files.

   ══════════════════════════════════════════════════════════════════════════

   [11](top) [12](keywords) [13](index)

  1.3. ... as librarian

 z80asm -xlibrary.lib [options] file...

   Build a library containing all the object files passed as argument. That
   library can then be used during linking by specifying it with the -i
   option.

   ══════════════════════════════════════════════════════════════════════════

   [14](top) [15](keywords) [16](index)

2. Options

   ══════════════════════════════════════════════════════════════════════════

   [17](top) [18](keywords) [19](index)

  2.1. Help Options

   ══════════════════════════════════════════════════════════════════════════

   [20](top) [21](keywords) [22](index)

    2.1.1. no arguments (show usage)

   Show a help screen with the available options.

   ══════════════════════════════════════════════════════════════════════════

   [23](top) [24](keywords) [25](index)

    2.1.2. -h, -?, --help (show manual)

   Show this document. The output can be piped to more for pagination.

   ══════════════════════════════════════════════════════════════════════════

   [26](top) [27](keywords) [28](index)

    2.1.3. -v, --verbose (show progress)

   Show progress messages on stdout.

   ══════════════════════════════════════════════════════════════════════════

   [29](top) [30](keywords) [31](index)

  2.2. Code Generation Options

   ══════════════════════════════════════════════════════════════════════════

   [32](top) [33](keywords) [34](index)

    2.2.1. -mCPU, --cpu=CPU (select CPU)

   Assemble for the given CPU. The following CPU's are supported:

     CPU                 Name
   z80      Zilog Z80
   z180     Zilog Z180
   z80n     ZX Next variant of the Z80
   gbz80    GameBoy variant of the Z80
   8080     Intel 8080 (1)
   8085     Intel 8085 (1)
   r2k      Rabbit RCM2000
   r3k      Rabbit RCM3000
   ti83     Texas Instruments TI83 (2)
   ti83plus Texas Instruments TI83Plus (2)

   Notes:

   (1) The Intel 8080 and 8085 are with Zilog or Intel mnemonics, except for
   the mnemonics that have different meanings, i.e.

   Intel   Zilog                      Comment
   JP nn JP P, nn   Must use Zilog mnemonic, as JP is ambiguous
   CP nn CALL P, nn Must use Zilog mnemonic, as CP is ambiguous

   (2) The Texas Instruments CPU's are standard Z80, but the INVOKE statement
   is assembled differently, i.e.

     CPU    Statement    Assembled as
   ti83     INVOKE nn CALL nn
   ti83plus INVOKE nn RST 0x28 \ DEFW nn

   ══════════════════════════════════════════════════════════════════════════

   [35](top) [36](keywords) [37](index)

    2.2.2. -IXIY, --IXIY (swap IX and IY)

   Swap all occurrences of registers IX and IY, and also their 8-bit halves
   (IXH, IXL, IYH and IYL).

   ══════════════════════════════════════════════════════════════════════════

   [38](top) [39](keywords) [40](index)

    2.2.3. --opt=speed (optimise for speed)

   Replace all occurrences of JR by JP, as the later are faster. DJNZ is not
   replaced by DEC B \ JP as the later is slower.

   ══════════════════════════════════════════════════════════════════════════

   [41](top) [42](keywords) [43](index)

    2.2.4. --debug (debug information)

   Add debug information to the map file: new symbols __C_LINE_nn and
   __ASM_LINE_nn are created on each C_LINE statement (supplied by the C
   compiler) and each asm line, and listed in the map file together with
   their source file location.

   ══════════════════════════════════════════════════════════════════════════

   [44](top) [45](keywords) [46](index)

  2.3. Output File Options

   ══════════════════════════════════════════════════════════════════════════

   [47](top) [48](keywords) [49](index)

    2.3.1. -m, --map (create map file)

   Creates a map file at the end of the link phase. The map file contains one
   line per defined symbol, with the following information:

     • symbol name
     • '='
     • aboslute address in the binary file in hexadecimal
     • ';'
     • 'const' if symbols is a constant, 'addr' if it is an address or
       'comput' if it is an expression evaluated at link time
     • ','
     • scope of the symbol: 'local', 'public', 'extern' or 'global'
     • ','
     • 'def' if symbol is a global define (defined with -Dsymbol or DEFINE),
       empty string otherwise
     • ','
     • module name where symbol was defined
     • ','
     • section name where symbol was defined
     • ','
     • source file name where symbol was defined
     • ':'
     • source line number where symbol was defined

   ══════════════════════════════════════════════════════════════════════════

   [50](top) [51](keywords) [52](index)

3. Copyright

   The original z80asm module assembler was written by Gunther Strube. It was
   converted from QL SuperBASIC version 0.956, initially ported to Lattice C,
   and then to C68 on QDOS.

   It has been maintained since 2011 by Paulo Custodio.

   Copyright (C) Gunther Strube, InterLogic 1993-99
   Copyright (C) Paulo Custodio, 2011-2020

   ══════════════════════════════════════════════════════════════════════════

   [53](top) [54](keywords) [55](index)

4. License

   Artistic License 2.0
   ([56]http://www.perlfoundation.org/artisticlicense2_0)

   ══════════════════════════════════════════════════════════════════════════

   [57](top) [58](keywords) [59](index)

5. Keywords

   [60]-IXIY [61]-h [62]-m [63]-mCPU [64]-v

   ══════════════════════════════════════════════════════════════════════════

   [65](top) [66](keywords) [67](index)

6. Index

     • [68]1. Usage ...

          • [69]1.1. ... as assembler
          • [70]1.2. ... as linker
          • [71]1.3. ... as librarian

     • [72]2. Options

          • [73]2.1. Help Options

               • [74]2.1.1. no arguments (show usage)
               • [75]2.1.2. [76]-h , -?, --help (show manual)
               • [77]2.1.3. [78]-v , --verbose (show progress)

          • [79]2.2. Code Generation Options

               • [80]2.2.1. [81]-mCPU , --cpu=CPU (select CPU)
               • [82]2.2.2. [83]-IXIY , - [84]-IXIY (swap IX and IY)
               • [85]2.2.3. --opt=speed (optimise for speed)
               • [86]2.2.4. --debug (debug information)

          • [87]2.3. Output File Options

               • [88]2.3.1. [89]-m , --map (create map file)

     • [90]3. Copyright
     • [91]4. License
     • [92]5. Keywords
     • [93]6. Index

    

References

   Visible links
   1. http://www.z88dk.org/
   2. file://z80asm.html#top
   3. file://z80asm.html#keywords
   4. file://z80asm.html#index
   5. file://z80asm.html#top
   6. file://z80asm.html#keywords
   7. file://z80asm.html#index
   8. file://z80asm.html#top
   9. file://z80asm.html#keywords
  10. file://z80asm.html#index
  11. file://z80asm.html#top
  12. file://z80asm.html#keywords
  13. file://z80asm.html#index
  14. file://z80asm.html#top
  15. file://z80asm.html#keywords
  16. file://z80asm.html#index
  17. file://z80asm.html#top
  18. file://z80asm.html#keywords
  19. file://z80asm.html#index
  20. file://z80asm.html#top
  21. file://z80asm.html#keywords
  22. file://z80asm.html#index
  23. file://z80asm.html#top
  24. file://z80asm.html#keywords
  25. file://z80asm.html#index
  26. file://z80asm.html#top
  27. file://z80asm.html#keywords
  28. file://z80asm.html#index
  29. file://z80asm.html#top
  30. file://z80asm.html#keywords
  31. file://z80asm.html#index
  32. file://z80asm.html#top
  33. file://z80asm.html#keywords
  34. file://z80asm.html#index
  35. file://z80asm.html#top
  36. file://z80asm.html#keywords
  37. file://z80asm.html#index
  38. file://z80asm.html#top
  39. file://z80asm.html#keywords
  40. file://z80asm.html#index
  41. file://z80asm.html#top
  42. file://z80asm.html#keywords
  43. file://z80asm.html#index
  44. file://z80asm.html#top
  45. file://z80asm.html#keywords
  46. file://z80asm.html#index
  47. file://z80asm.html#top
  48. file://z80asm.html#keywords
  49. file://z80asm.html#index
  50. file://z80asm.html#top
  51. file://z80asm.html#keywords
  52. file://z80asm.html#index
  53. file://z80asm.html#top
  54. file://z80asm.html#keywords
  55. file://z80asm.html#index
  56. http://www.perlfoundation.org/artisticlicense2_0
  57. file://z80asm.html#top
  58. file://z80asm.html#keywords
  59. file://z80asm.html#index
  60. file://z80asm.html#2_2_2
  61. file://z80asm.html#2_1_2
  62. file://z80asm.html#2_3_1
  63. file://z80asm.html#2_2_1
  64. file://z80asm.html#2_1_3
  65. file://z80asm.html#top
  66. file://z80asm.html#keywords
  67. file://z80asm.html#index
  68. file://z80asm.html#1
  69. file://z80asm.html#1_1
  70. file://z80asm.html#1_2
  71. file://z80asm.html#1_3
  72. file://z80asm.html#2
  73. file://z80asm.html#2_1
  74. file://z80asm.html#2_1_1
  75. file://z80asm.html#2_1_2
  76. file://z80asm.html#2_1_2
  77. file://z80asm.html#2_1_3
  78. file://z80asm.html#2_1_3
  79. file://z80asm.html#2_2
  80. file://z80asm.html#2_2_1
  81. file://z80asm.html#2_2_1
  82. file://z80asm.html#2_2_2
  83. file://z80asm.html#2_2_2
  84. file://z80asm.html#2_2_2
  85. file://z80asm.html#2_2_3
  86. file://z80asm.html#2_2_4
  87. file://z80asm.html#2_3
  88. file://z80asm.html#2_3_1
  89. file://z80asm.html#2_3_1
  90. file://z80asm.html#3
  91. file://z80asm.html#4
  92. file://z80asm.html#5
  93. file://z80asm.html#6
